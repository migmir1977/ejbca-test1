/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 124.0, "minX": 0.0, "maxY": 7681.0, "series": [{"data": [[0.0, 173.0], [0.1, 186.0], [0.2, 242.0], [0.3, 250.0], [0.4, 267.0], [0.5, 274.0], [0.6, 287.0], [0.7, 292.0], [0.8, 300.0], [0.9, 305.0], [1.0, 307.0], [1.1, 309.0], [1.2, 310.0], [1.3, 313.0], [1.4, 316.0], [1.5, 319.0], [1.6, 320.0], [1.7, 321.0], [1.8, 323.0], [1.9, 326.0], [2.0, 327.0], [2.1, 330.0], [2.2, 335.0], [2.3, 336.0], [2.4, 340.0], [2.5, 343.0], [2.6, 344.0], [2.7, 346.0], [2.8, 348.0], [2.9, 349.0], [3.0, 350.0], [3.1, 353.0], [3.2, 354.0], [3.3, 355.0], [3.4, 356.0], [3.5, 358.0], [3.6, 360.0], [3.7, 363.0], [3.8, 364.0], [3.9, 365.0], [4.0, 367.0], [4.1, 368.0], [4.2, 368.0], [4.3, 369.0], [4.4, 370.0], [4.5, 373.0], [4.6, 374.0], [4.7, 375.0], [4.8, 377.0], [4.9, 379.0], [5.0, 380.0], [5.1, 383.0], [5.2, 383.0], [5.3, 383.0], [5.4, 385.0], [5.5, 387.0], [5.6, 389.0], [5.7, 390.0], [5.8, 392.0], [5.9, 393.0], [6.0, 394.0], [6.1, 395.0], [6.2, 398.0], [6.3, 399.0], [6.4, 399.0], [6.5, 400.0], [6.6, 402.0], [6.7, 404.0], [6.8, 405.0], [6.9, 406.0], [7.0, 406.0], [7.1, 407.0], [7.2, 408.0], [7.3, 409.0], [7.4, 409.0], [7.5, 411.0], [7.6, 411.0], [7.7, 413.0], [7.8, 413.0], [7.9, 415.0], [8.0, 415.0], [8.1, 417.0], [8.2, 417.0], [8.3, 420.0], [8.4, 422.0], [8.5, 423.0], [8.6, 423.0], [8.7, 425.0], [8.8, 427.0], [8.9, 428.0], [9.0, 429.0], [9.1, 430.0], [9.2, 431.0], [9.3, 431.0], [9.4, 433.0], [9.5, 434.0], [9.6, 435.0], [9.7, 436.0], [9.8, 437.0], [9.9, 437.0], [10.0, 439.0], [10.1, 439.0], [10.2, 441.0], [10.3, 441.0], [10.4, 442.0], [10.5, 443.0], [10.6, 444.0], [10.7, 445.0], [10.8, 446.0], [10.9, 446.0], [11.0, 447.0], [11.1, 447.0], [11.2, 450.0], [11.3, 450.0], [11.4, 451.0], [11.5, 452.0], [11.6, 453.0], [11.7, 454.0], [11.8, 455.0], [11.9, 455.0], [12.0, 455.0], [12.1, 457.0], [12.2, 457.0], [12.3, 458.0], [12.4, 458.0], [12.5, 459.0], [12.6, 462.0], [12.7, 464.0], [12.8, 465.0], [12.9, 465.0], [13.0, 466.0], [13.1, 468.0], [13.2, 470.0], [13.3, 471.0], [13.4, 471.0], [13.5, 472.0], [13.6, 474.0], [13.7, 474.0], [13.8, 475.0], [13.9, 475.0], [14.0, 475.0], [14.1, 477.0], [14.2, 478.0], [14.3, 478.0], [14.4, 478.0], [14.5, 479.0], [14.6, 480.0], [14.7, 481.0], [14.8, 481.0], [14.9, 483.0], [15.0, 485.0], [15.1, 487.0], [15.2, 488.0], [15.3, 488.0], [15.4, 490.0], [15.5, 490.0], [15.6, 491.0], [15.7, 494.0], [15.8, 496.0], [15.9, 497.0], [16.0, 498.0], [16.1, 499.0], [16.2, 500.0], [16.3, 500.0], [16.4, 501.0], [16.5, 502.0], [16.6, 503.0], [16.7, 505.0], [16.8, 506.0], [16.9, 506.0], [17.0, 508.0], [17.1, 508.0], [17.2, 509.0], [17.3, 510.0], [17.4, 511.0], [17.5, 512.0], [17.6, 514.0], [17.7, 515.0], [17.8, 515.0], [17.9, 515.0], [18.0, 516.0], [18.1, 516.0], [18.2, 517.0], [18.3, 518.0], [18.4, 518.0], [18.5, 520.0], [18.6, 521.0], [18.7, 522.0], [18.8, 524.0], [18.9, 524.0], [19.0, 524.0], [19.1, 525.0], [19.2, 525.0], [19.3, 527.0], [19.4, 527.0], [19.5, 528.0], [19.6, 528.0], [19.7, 529.0], [19.8, 531.0], [19.9, 532.0], [20.0, 533.0], [20.1, 534.0], [20.2, 535.0], [20.3, 536.0], [20.4, 537.0], [20.5, 537.0], [20.6, 537.0], [20.7, 537.0], [20.8, 538.0], [20.9, 540.0], [21.0, 541.0], [21.1, 541.0], [21.2, 543.0], [21.3, 544.0], [21.4, 544.0], [21.5, 544.0], [21.6, 545.0], [21.7, 546.0], [21.8, 547.0], [21.9, 547.0], [22.0, 548.0], [22.1, 549.0], [22.2, 552.0], [22.3, 552.0], [22.4, 553.0], [22.5, 553.0], [22.6, 554.0], [22.7, 556.0], [22.8, 556.0], [22.9, 556.0], [23.0, 557.0], [23.1, 557.0], [23.2, 559.0], [23.3, 560.0], [23.4, 560.0], [23.5, 561.0], [23.6, 563.0], [23.7, 563.0], [23.8, 563.0], [23.9, 564.0], [24.0, 565.0], [24.1, 568.0], [24.2, 568.0], [24.3, 569.0], [24.4, 570.0], [24.5, 571.0], [24.6, 572.0], [24.7, 572.0], [24.8, 572.0], [24.9, 572.0], [25.0, 574.0], [25.1, 574.0], [25.2, 575.0], [25.3, 575.0], [25.4, 577.0], [25.5, 577.0], [25.6, 578.0], [25.7, 579.0], [25.8, 580.0], [25.9, 581.0], [26.0, 583.0], [26.1, 584.0], [26.2, 585.0], [26.3, 586.0], [26.4, 587.0], [26.5, 587.0], [26.6, 588.0], [26.7, 589.0], [26.8, 589.0], [26.9, 590.0], [27.0, 590.0], [27.1, 591.0], [27.2, 591.0], [27.3, 592.0], [27.4, 592.0], [27.5, 593.0], [27.6, 594.0], [27.7, 594.0], [27.8, 594.0], [27.9, 595.0], [28.0, 595.0], [28.1, 596.0], [28.2, 597.0], [28.3, 598.0], [28.4, 599.0], [28.5, 600.0], [28.6, 600.0], [28.7, 601.0], [28.8, 602.0], [28.9, 603.0], [29.0, 603.0], [29.1, 605.0], [29.2, 606.0], [29.3, 607.0], [29.4, 607.0], [29.5, 608.0], [29.6, 609.0], [29.7, 609.0], [29.8, 610.0], [29.9, 610.0], [30.0, 611.0], [30.1, 613.0], [30.2, 614.0], [30.3, 614.0], [30.4, 615.0], [30.5, 616.0], [30.6, 617.0], [30.7, 618.0], [30.8, 618.0], [30.9, 618.0], [31.0, 620.0], [31.1, 620.0], [31.2, 621.0], [31.3, 623.0], [31.4, 624.0], [31.5, 625.0], [31.6, 625.0], [31.7, 627.0], [31.8, 628.0], [31.9, 628.0], [32.0, 630.0], [32.1, 630.0], [32.2, 630.0], [32.3, 631.0], [32.4, 634.0], [32.5, 635.0], [32.6, 635.0], [32.7, 635.0], [32.8, 636.0], [32.9, 637.0], [33.0, 638.0], [33.1, 639.0], [33.2, 639.0], [33.3, 639.0], [33.4, 641.0], [33.5, 642.0], [33.6, 642.0], [33.7, 644.0], [33.8, 646.0], [33.9, 646.0], [34.0, 647.0], [34.1, 647.0], [34.2, 648.0], [34.3, 648.0], [34.4, 649.0], [34.5, 649.0], [34.6, 650.0], [34.7, 651.0], [34.8, 651.0], [34.9, 651.0], [35.0, 652.0], [35.1, 653.0], [35.2, 653.0], [35.3, 654.0], [35.4, 654.0], [35.5, 654.0], [35.6, 655.0], [35.7, 656.0], [35.8, 657.0], [35.9, 658.0], [36.0, 659.0], [36.1, 659.0], [36.2, 660.0], [36.3, 662.0], [36.4, 664.0], [36.5, 664.0], [36.6, 665.0], [36.7, 665.0], [36.8, 666.0], [36.9, 667.0], [37.0, 668.0], [37.1, 669.0], [37.2, 671.0], [37.3, 673.0], [37.4, 674.0], [37.5, 675.0], [37.6, 676.0], [37.7, 677.0], [37.8, 678.0], [37.9, 679.0], [38.0, 679.0], [38.1, 681.0], [38.2, 681.0], [38.3, 681.0], [38.4, 682.0], [38.5, 683.0], [38.6, 683.0], [38.7, 684.0], [38.8, 684.0], [38.9, 685.0], [39.0, 685.0], [39.1, 686.0], [39.2, 687.0], [39.3, 688.0], [39.4, 688.0], [39.5, 688.0], [39.6, 689.0], [39.7, 689.0], [39.8, 689.0], [39.9, 691.0], [40.0, 693.0], [40.1, 694.0], [40.2, 695.0], [40.3, 696.0], [40.4, 696.0], [40.5, 697.0], [40.6, 698.0], [40.7, 698.0], [40.8, 700.0], [40.9, 700.0], [41.0, 701.0], [41.1, 702.0], [41.2, 702.0], [41.3, 703.0], [41.4, 703.0], [41.5, 704.0], [41.6, 704.0], [41.7, 705.0], [41.8, 707.0], [41.9, 708.0], [42.0, 710.0], [42.1, 710.0], [42.2, 712.0], [42.3, 713.0], [42.4, 715.0], [42.5, 716.0], [42.6, 717.0], [42.7, 718.0], [42.8, 718.0], [42.9, 720.0], [43.0, 720.0], [43.1, 721.0], [43.2, 721.0], [43.3, 722.0], [43.4, 723.0], [43.5, 724.0], [43.6, 724.0], [43.7, 725.0], [43.8, 725.0], [43.9, 725.0], [44.0, 726.0], [44.1, 727.0], [44.2, 727.0], [44.3, 727.0], [44.4, 728.0], [44.5, 729.0], [44.6, 731.0], [44.7, 732.0], [44.8, 733.0], [44.9, 734.0], [45.0, 735.0], [45.1, 736.0], [45.2, 738.0], [45.3, 739.0], [45.4, 741.0], [45.5, 741.0], [45.6, 742.0], [45.7, 744.0], [45.8, 745.0], [45.9, 745.0], [46.0, 746.0], [46.1, 746.0], [46.2, 747.0], [46.3, 748.0], [46.4, 749.0], [46.5, 750.0], [46.6, 750.0], [46.7, 751.0], [46.8, 752.0], [46.9, 752.0], [47.0, 753.0], [47.1, 753.0], [47.2, 754.0], [47.3, 754.0], [47.4, 756.0], [47.5, 756.0], [47.6, 757.0], [47.7, 757.0], [47.8, 759.0], [47.9, 759.0], [48.0, 763.0], [48.1, 763.0], [48.2, 764.0], [48.3, 764.0], [48.4, 766.0], [48.5, 767.0], [48.6, 769.0], [48.7, 770.0], [48.8, 771.0], [48.9, 771.0], [49.0, 772.0], [49.1, 773.0], [49.2, 774.0], [49.3, 775.0], [49.4, 776.0], [49.5, 777.0], [49.6, 778.0], [49.7, 778.0], [49.8, 778.0], [49.9, 779.0], [50.0, 779.0], [50.1, 780.0], [50.2, 780.0], [50.3, 781.0], [50.4, 782.0], [50.5, 783.0], [50.6, 784.0], [50.7, 784.0], [50.8, 785.0], [50.9, 787.0], [51.0, 787.0], [51.1, 788.0], [51.2, 793.0], [51.3, 794.0], [51.4, 796.0], [51.5, 796.0], [51.6, 799.0], [51.7, 799.0], [51.8, 799.0], [51.9, 800.0], [52.0, 802.0], [52.1, 803.0], [52.2, 803.0], [52.3, 803.0], [52.4, 804.0], [52.5, 805.0], [52.6, 806.0], [52.7, 807.0], [52.8, 808.0], [52.9, 808.0], [53.0, 809.0], [53.1, 810.0], [53.2, 811.0], [53.3, 812.0], [53.4, 813.0], [53.5, 814.0], [53.6, 815.0], [53.7, 816.0], [53.8, 816.0], [53.9, 816.0], [54.0, 818.0], [54.1, 820.0], [54.2, 820.0], [54.3, 821.0], [54.4, 821.0], [54.5, 822.0], [54.6, 824.0], [54.7, 824.0], [54.8, 826.0], [54.9, 826.0], [55.0, 828.0], [55.1, 829.0], [55.2, 830.0], [55.3, 831.0], [55.4, 832.0], [55.5, 833.0], [55.6, 833.0], [55.7, 834.0], [55.8, 836.0], [55.9, 837.0], [56.0, 838.0], [56.1, 839.0], [56.2, 840.0], [56.3, 842.0], [56.4, 843.0], [56.5, 844.0], [56.6, 844.0], [56.7, 845.0], [56.8, 846.0], [56.9, 847.0], [57.0, 849.0], [57.1, 850.0], [57.2, 850.0], [57.3, 851.0], [57.4, 852.0], [57.5, 853.0], [57.6, 854.0], [57.7, 857.0], [57.8, 857.0], [57.9, 858.0], [58.0, 859.0], [58.1, 862.0], [58.2, 862.0], [58.3, 863.0], [58.4, 863.0], [58.5, 863.0], [58.6, 866.0], [58.7, 866.0], [58.8, 867.0], [58.9, 867.0], [59.0, 870.0], [59.1, 870.0], [59.2, 871.0], [59.3, 871.0], [59.4, 872.0], [59.5, 873.0], [59.6, 874.0], [59.7, 874.0], [59.8, 875.0], [59.9, 877.0], [60.0, 879.0], [60.1, 879.0], [60.2, 880.0], [60.3, 881.0], [60.4, 882.0], [60.5, 883.0], [60.6, 885.0], [60.7, 885.0], [60.8, 886.0], [60.9, 886.0], [61.0, 887.0], [61.1, 889.0], [61.2, 890.0], [61.3, 891.0], [61.4, 892.0], [61.5, 893.0], [61.6, 893.0], [61.7, 896.0], [61.8, 896.0], [61.9, 897.0], [62.0, 899.0], [62.1, 901.0], [62.2, 902.0], [62.3, 902.0], [62.4, 903.0], [62.5, 904.0], [62.6, 906.0], [62.7, 907.0], [62.8, 908.0], [62.9, 909.0], [63.0, 910.0], [63.1, 911.0], [63.2, 913.0], [63.3, 915.0], [63.4, 916.0], [63.5, 917.0], [63.6, 918.0], [63.7, 919.0], [63.8, 921.0], [63.9, 921.0], [64.0, 924.0], [64.1, 925.0], [64.2, 926.0], [64.3, 928.0], [64.4, 929.0], [64.5, 930.0], [64.6, 931.0], [64.7, 934.0], [64.8, 937.0], [64.9, 937.0], [65.0, 938.0], [65.1, 940.0], [65.2, 941.0], [65.3, 942.0], [65.4, 943.0], [65.5, 945.0], [65.6, 947.0], [65.7, 948.0], [65.8, 950.0], [65.9, 951.0], [66.0, 953.0], [66.1, 954.0], [66.2, 955.0], [66.3, 956.0], [66.4, 957.0], [66.5, 959.0], [66.6, 960.0], [66.7, 960.0], [66.8, 961.0], [66.9, 962.0], [67.0, 964.0], [67.1, 965.0], [67.2, 966.0], [67.3, 966.0], [67.4, 967.0], [67.5, 968.0], [67.6, 970.0], [67.7, 972.0], [67.8, 972.0], [67.9, 972.0], [68.0, 974.0], [68.1, 975.0], [68.2, 978.0], [68.3, 979.0], [68.4, 979.0], [68.5, 980.0], [68.6, 982.0], [68.7, 982.0], [68.8, 982.0], [68.9, 985.0], [69.0, 988.0], [69.1, 990.0], [69.2, 991.0], [69.3, 991.0], [69.4, 992.0], [69.5, 993.0], [69.6, 994.0], [69.7, 996.0], [69.8, 997.0], [69.9, 997.0], [70.0, 998.0], [70.1, 1000.0], [70.2, 1003.0], [70.3, 1004.0], [70.4, 1005.0], [70.5, 1005.0], [70.6, 1007.0], [70.7, 1011.0], [70.8, 1012.0], [70.9, 1013.0], [71.0, 1015.0], [71.1, 1016.0], [71.2, 1018.0], [71.3, 1021.0], [71.4, 1022.0], [71.5, 1023.0], [71.6, 1024.0], [71.7, 1026.0], [71.8, 1027.0], [71.9, 1029.0], [72.0, 1030.0], [72.1, 1031.0], [72.2, 1032.0], [72.3, 1033.0], [72.4, 1034.0], [72.5, 1035.0], [72.6, 1037.0], [72.7, 1038.0], [72.8, 1039.0], [72.9, 1040.0], [73.0, 1044.0], [73.1, 1045.0], [73.2, 1048.0], [73.3, 1050.0], [73.4, 1051.0], [73.5, 1052.0], [73.6, 1053.0], [73.7, 1057.0], [73.8, 1059.0], [73.9, 1059.0], [74.0, 1062.0], [74.1, 1062.0], [74.2, 1064.0], [74.3, 1065.0], [74.4, 1066.0], [74.5, 1067.0], [74.6, 1069.0], [74.7, 1070.0], [74.8, 1070.0], [74.9, 1071.0], [75.0, 1073.0], [75.1, 1074.0], [75.2, 1077.0], [75.3, 1078.0], [75.4, 1082.0], [75.5, 1082.0], [75.6, 1084.0], [75.7, 1084.0], [75.8, 1085.0], [75.9, 1086.0], [76.0, 1086.0], [76.1, 1087.0], [76.2, 1089.0], [76.3, 1090.0], [76.4, 1092.0], [76.5, 1092.0], [76.6, 1094.0], [76.7, 1094.0], [76.8, 1095.0], [76.9, 1096.0], [77.0, 1100.0], [77.1, 1102.0], [77.2, 1103.0], [77.3, 1105.0], [77.4, 1108.0], [77.5, 1109.0], [77.6, 1113.0], [77.7, 1115.0], [77.8, 1117.0], [77.9, 1118.0], [78.0, 1119.0], [78.1, 1120.0], [78.2, 1121.0], [78.3, 1121.0], [78.4, 1122.0], [78.5, 1123.0], [78.6, 1124.0], [78.7, 1125.0], [78.8, 1127.0], [78.9, 1127.0], [79.0, 1129.0], [79.1, 1129.0], [79.2, 1130.0], [79.3, 1132.0], [79.4, 1134.0], [79.5, 1136.0], [79.6, 1138.0], [79.7, 1140.0], [79.8, 1144.0], [79.9, 1145.0], [80.0, 1147.0], [80.1, 1147.0], [80.2, 1151.0], [80.3, 1152.0], [80.4, 1154.0], [80.5, 1160.0], [80.6, 1162.0], [80.7, 1168.0], [80.8, 1171.0], [80.9, 1173.0], [81.0, 1176.0], [81.1, 1181.0], [81.2, 1182.0], [81.3, 1184.0], [81.4, 1184.0], [81.5, 1190.0], [81.6, 1193.0], [81.7, 1196.0], [81.8, 1197.0], [81.9, 1199.0], [82.0, 1200.0], [82.1, 1204.0], [82.2, 1205.0], [82.3, 1206.0], [82.4, 1207.0], [82.5, 1208.0], [82.6, 1213.0], [82.7, 1215.0], [82.8, 1216.0], [82.9, 1219.0], [83.0, 1220.0], [83.1, 1221.0], [83.2, 1222.0], [83.3, 1225.0], [83.4, 1227.0], [83.5, 1230.0], [83.6, 1232.0], [83.7, 1234.0], [83.8, 1237.0], [83.9, 1241.0], [84.0, 1242.0], [84.1, 1244.0], [84.2, 1246.0], [84.3, 1247.0], [84.4, 1248.0], [84.5, 1249.0], [84.6, 1251.0], [84.7, 1251.0], [84.8, 1252.0], [84.9, 1255.0], [85.0, 1255.0], [85.1, 1256.0], [85.2, 1258.0], [85.3, 1261.0], [85.4, 1262.0], [85.5, 1267.0], [85.6, 1270.0], [85.7, 1272.0], [85.8, 1276.0], [85.9, 1279.0], [86.0, 1280.0], [86.1, 1283.0], [86.2, 1285.0], [86.3, 1286.0], [86.4, 1287.0], [86.5, 1288.0], [86.6, 1291.0], [86.7, 1292.0], [86.8, 1294.0], [86.9, 1297.0], [87.0, 1298.0], [87.1, 1304.0], [87.2, 1305.0], [87.3, 1307.0], [87.4, 1307.0], [87.5, 1308.0], [87.6, 1311.0], [87.7, 1317.0], [87.8, 1319.0], [87.9, 1324.0], [88.0, 1325.0], [88.1, 1328.0], [88.2, 1329.0], [88.3, 1333.0], [88.4, 1335.0], [88.5, 1336.0], [88.6, 1339.0], [88.7, 1344.0], [88.8, 1346.0], [88.9, 1351.0], [89.0, 1354.0], [89.1, 1355.0], [89.2, 1356.0], [89.3, 1358.0], [89.4, 1361.0], [89.5, 1362.0], [89.6, 1363.0], [89.7, 1366.0], [89.8, 1368.0], [89.9, 1371.0], [90.0, 1372.0], [90.1, 1377.0], [90.2, 1380.0], [90.3, 1382.0], [90.4, 1385.0], [90.5, 1390.0], [90.6, 1391.0], [90.7, 1396.0], [90.8, 1402.0], [90.9, 1404.0], [91.0, 1411.0], [91.1, 1414.0], [91.2, 1415.0], [91.3, 1417.0], [91.4, 1421.0], [91.5, 1422.0], [91.6, 1423.0], [91.7, 1431.0], [91.8, 1437.0], [91.9, 1448.0], [92.0, 1450.0], [92.1, 1455.0], [92.2, 1458.0], [92.3, 1458.0], [92.4, 1463.0], [92.5, 1469.0], [92.6, 1470.0], [92.7, 1472.0], [92.8, 1475.0], [92.9, 1484.0], [93.0, 1487.0], [93.1, 1489.0], [93.2, 1492.0], [93.3, 1497.0], [93.4, 1500.0], [93.5, 1512.0], [93.6, 1515.0], [93.7, 1517.0], [93.8, 1518.0], [93.9, 1521.0], [94.0, 1522.0], [94.1, 1525.0], [94.2, 1527.0], [94.3, 1529.0], [94.4, 1534.0], [94.5, 1540.0], [94.6, 1543.0], [94.7, 1549.0], [94.8, 1553.0], [94.9, 1556.0], [95.0, 1559.0], [95.1, 1568.0], [95.2, 1572.0], [95.3, 1584.0], [95.4, 1596.0], [95.5, 1601.0], [95.6, 1607.0], [95.7, 1628.0], [95.8, 1636.0], [95.9, 1638.0], [96.0, 1646.0], [96.1, 1653.0], [96.2, 1658.0], [96.3, 1662.0], [96.4, 1676.0], [96.5, 1681.0], [96.6, 1683.0], [96.7, 1695.0], [96.8, 1701.0], [96.9, 1713.0], [97.0, 1733.0], [97.1, 1789.0], [97.2, 1792.0], [97.3, 1798.0], [97.4, 1803.0], [97.5, 1812.0], [97.6, 1819.0], [97.7, 1829.0], [97.8, 1850.0], [97.9, 1864.0], [98.0, 1865.0], [98.1, 1894.0], [98.2, 1908.0], [98.3, 1940.0], [98.4, 1961.0], [98.5, 1994.0], [98.6, 1997.0], [98.7, 2010.0], [98.8, 2013.0], [98.9, 2060.0], [99.0, 2079.0], [99.1, 2171.0], [99.2, 2201.0], [99.3, 2248.0], [99.4, 2287.0], [99.5, 2312.0], [99.6, 2421.0], [99.7, 2646.0], [99.8, 2734.0], [99.9, 3193.0], [100.0, 4428.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[0.0, 124.0], [0.1, 170.0], [0.2, 185.0], [0.3, 212.0], [0.4, 216.0], [0.5, 222.0], [0.6, 234.0], [0.7, 235.0], [0.8, 239.0], [0.9, 241.0], [1.0, 247.0], [1.1, 248.0], [1.2, 249.0], [1.3, 255.0], [1.4, 257.0], [1.5, 259.0], [1.6, 261.0], [1.7, 263.0], [1.8, 264.0], [1.9, 266.0], [2.0, 267.0], [2.1, 268.0], [2.2, 268.0], [2.3, 270.0], [2.4, 272.0], [2.5, 272.0], [2.6, 272.0], [2.7, 273.0], [2.8, 274.0], [2.9, 275.0], [3.0, 276.0], [3.1, 278.0], [3.2, 279.0], [3.3, 279.0], [3.4, 280.0], [3.5, 281.0], [3.6, 281.0], [3.7, 282.0], [3.8, 282.0], [3.9, 283.0], [4.0, 284.0], [4.1, 285.0], [4.2, 285.0], [4.3, 285.0], [4.4, 286.0], [4.5, 286.0], [4.6, 286.0], [4.7, 287.0], [4.8, 288.0], [4.9, 290.0], [5.0, 290.0], [5.1, 291.0], [5.2, 292.0], [5.3, 292.0], [5.4, 293.0], [5.5, 293.0], [5.6, 293.0], [5.7, 294.0], [5.8, 295.0], [5.9, 296.0], [6.0, 296.0], [6.1, 297.0], [6.2, 298.0], [6.3, 298.0], [6.4, 298.0], [6.5, 299.0], [6.6, 300.0], [6.7, 300.0], [6.8, 300.0], [6.9, 301.0], [7.0, 301.0], [7.1, 303.0], [7.2, 303.0], [7.3, 303.0], [7.4, 304.0], [7.5, 304.0], [7.6, 304.0], [7.7, 305.0], [7.8, 306.0], [7.9, 307.0], [8.0, 307.0], [8.1, 307.0], [8.2, 308.0], [8.3, 308.0], [8.4, 308.0], [8.5, 309.0], [8.6, 309.0], [8.7, 310.0], [8.8, 310.0], [8.9, 310.0], [9.0, 311.0], [9.1, 312.0], [9.2, 313.0], [9.3, 313.0], [9.4, 314.0], [9.5, 314.0], [9.6, 315.0], [9.7, 316.0], [9.8, 316.0], [9.9, 317.0], [10.0, 318.0], [10.1, 318.0], [10.2, 319.0], [10.3, 319.0], [10.4, 319.0], [10.5, 320.0], [10.6, 320.0], [10.7, 321.0], [10.8, 321.0], [10.9, 321.0], [11.0, 322.0], [11.1, 323.0], [11.2, 323.0], [11.3, 323.0], [11.4, 324.0], [11.5, 324.0], [11.6, 325.0], [11.7, 325.0], [11.8, 325.0], [11.9, 325.0], [12.0, 325.0], [12.1, 326.0], [12.2, 326.0], [12.3, 326.0], [12.4, 326.0], [12.5, 327.0], [12.6, 327.0], [12.7, 327.0], [12.8, 328.0], [12.9, 328.0], [13.0, 328.0], [13.1, 328.0], [13.2, 329.0], [13.3, 329.0], [13.4, 330.0], [13.5, 330.0], [13.6, 331.0], [13.7, 331.0], [13.8, 331.0], [13.9, 331.0], [14.0, 332.0], [14.1, 332.0], [14.2, 333.0], [14.3, 333.0], [14.4, 334.0], [14.5, 334.0], [14.6, 335.0], [14.7, 336.0], [14.8, 336.0], [14.9, 336.0], [15.0, 336.0], [15.1, 336.0], [15.2, 337.0], [15.3, 337.0], [15.4, 338.0], [15.5, 338.0], [15.6, 339.0], [15.7, 339.0], [15.8, 340.0], [15.9, 340.0], [16.0, 340.0], [16.1, 340.0], [16.2, 340.0], [16.3, 341.0], [16.4, 341.0], [16.5, 342.0], [16.6, 342.0], [16.7, 342.0], [16.8, 343.0], [16.9, 343.0], [17.0, 344.0], [17.1, 344.0], [17.2, 344.0], [17.3, 344.0], [17.4, 345.0], [17.5, 345.0], [17.6, 345.0], [17.7, 345.0], [17.8, 346.0], [17.9, 346.0], [18.0, 346.0], [18.1, 347.0], [18.2, 347.0], [18.3, 347.0], [18.4, 348.0], [18.5, 348.0], [18.6, 348.0], [18.7, 349.0], [18.8, 349.0], [18.9, 350.0], [19.0, 350.0], [19.1, 350.0], [19.2, 351.0], [19.3, 351.0], [19.4, 351.0], [19.5, 351.0], [19.6, 352.0], [19.7, 352.0], [19.8, 353.0], [19.9, 353.0], [20.0, 354.0], [20.1, 354.0], [20.2, 354.0], [20.3, 354.0], [20.4, 355.0], [20.5, 355.0], [20.6, 356.0], [20.7, 356.0], [20.8, 356.0], [20.9, 357.0], [21.0, 357.0], [21.1, 357.0], [21.2, 357.0], [21.3, 358.0], [21.4, 358.0], [21.5, 358.0], [21.6, 358.0], [21.7, 358.0], [21.8, 359.0], [21.9, 359.0], [22.0, 359.0], [22.1, 359.0], [22.2, 360.0], [22.3, 360.0], [22.4, 361.0], [22.5, 361.0], [22.6, 361.0], [22.7, 362.0], [22.8, 362.0], [22.9, 362.0], [23.0, 362.0], [23.1, 363.0], [23.2, 363.0], [23.3, 363.0], [23.4, 363.0], [23.5, 364.0], [23.6, 364.0], [23.7, 364.0], [23.8, 365.0], [23.9, 365.0], [24.0, 365.0], [24.1, 365.0], [24.2, 365.0], [24.3, 365.0], [24.4, 365.0], [24.5, 366.0], [24.6, 367.0], [24.7, 367.0], [24.8, 367.0], [24.9, 367.0], [25.0, 367.0], [25.1, 368.0], [25.2, 368.0], [25.3, 369.0], [25.4, 369.0], [25.5, 369.0], [25.6, 369.0], [25.7, 370.0], [25.8, 370.0], [25.9, 370.0], [26.0, 371.0], [26.1, 371.0], [26.2, 372.0], [26.3, 372.0], [26.4, 372.0], [26.5, 372.0], [26.6, 373.0], [26.7, 373.0], [26.8, 373.0], [26.9, 373.0], [27.0, 373.0], [27.1, 374.0], [27.2, 375.0], [27.3, 375.0], [27.4, 375.0], [27.5, 375.0], [27.6, 375.0], [27.7, 376.0], [27.8, 376.0], [27.9, 376.0], [28.0, 377.0], [28.1, 377.0], [28.2, 377.0], [28.3, 377.0], [28.4, 378.0], [28.5, 378.0], [28.6, 379.0], [28.7, 379.0], [28.8, 379.0], [28.9, 380.0], [29.0, 380.0], [29.1, 380.0], [29.2, 380.0], [29.3, 381.0], [29.4, 381.0], [29.5, 382.0], [29.6, 382.0], [29.7, 382.0], [29.8, 382.0], [29.9, 383.0], [30.0, 383.0], [30.1, 383.0], [30.2, 383.0], [30.3, 383.0], [30.4, 383.0], [30.5, 384.0], [30.6, 384.0], [30.7, 384.0], [30.8, 385.0], [30.9, 385.0], [31.0, 385.0], [31.1, 386.0], [31.2, 386.0], [31.3, 386.0], [31.4, 386.0], [31.5, 386.0], [31.6, 387.0], [31.7, 387.0], [31.8, 388.0], [31.9, 388.0], [32.0, 388.0], [32.1, 389.0], [32.2, 389.0], [32.3, 389.0], [32.4, 389.0], [32.5, 389.0], [32.6, 390.0], [32.7, 390.0], [32.8, 390.0], [32.9, 391.0], [33.0, 391.0], [33.1, 391.0], [33.2, 391.0], [33.3, 392.0], [33.4, 392.0], [33.5, 392.0], [33.6, 393.0], [33.7, 393.0], [33.8, 393.0], [33.9, 394.0], [34.0, 394.0], [34.1, 394.0], [34.2, 395.0], [34.3, 395.0], [34.4, 395.0], [34.5, 396.0], [34.6, 396.0], [34.7, 397.0], [34.8, 397.0], [34.9, 397.0], [35.0, 397.0], [35.1, 398.0], [35.2, 398.0], [35.3, 398.0], [35.4, 398.0], [35.5, 398.0], [35.6, 399.0], [35.7, 399.0], [35.8, 399.0], [35.9, 399.0], [36.0, 400.0], [36.1, 400.0], [36.2, 400.0], [36.3, 401.0], [36.4, 401.0], [36.5, 401.0], [36.6, 401.0], [36.7, 401.0], [36.8, 402.0], [36.9, 402.0], [37.0, 402.0], [37.1, 403.0], [37.2, 403.0], [37.3, 404.0], [37.4, 404.0], [37.5, 404.0], [37.6, 404.0], [37.7, 404.0], [37.8, 404.0], [37.9, 405.0], [38.0, 405.0], [38.1, 405.0], [38.2, 405.0], [38.3, 406.0], [38.4, 406.0], [38.5, 406.0], [38.6, 406.0], [38.7, 406.0], [38.8, 406.0], [38.9, 407.0], [39.0, 407.0], [39.1, 407.0], [39.2, 407.0], [39.3, 408.0], [39.4, 408.0], [39.5, 408.0], [39.6, 409.0], [39.7, 409.0], [39.8, 409.0], [39.9, 409.0], [40.0, 409.0], [40.1, 410.0], [40.2, 411.0], [40.3, 411.0], [40.4, 411.0], [40.5, 412.0], [40.6, 412.0], [40.7, 413.0], [40.8, 413.0], [40.9, 413.0], [41.0, 413.0], [41.1, 413.0], [41.2, 414.0], [41.3, 414.0], [41.4, 414.0], [41.5, 414.0], [41.6, 415.0], [41.7, 415.0], [41.8, 415.0], [41.9, 416.0], [42.0, 416.0], [42.1, 416.0], [42.2, 416.0], [42.3, 417.0], [42.4, 417.0], [42.5, 417.0], [42.6, 417.0], [42.7, 418.0], [42.8, 418.0], [42.9, 418.0], [43.0, 419.0], [43.1, 419.0], [43.2, 419.0], [43.3, 420.0], [43.4, 420.0], [43.5, 421.0], [43.6, 421.0], [43.7, 421.0], [43.8, 421.0], [43.9, 422.0], [44.0, 422.0], [44.1, 423.0], [44.2, 423.0], [44.3, 423.0], [44.4, 424.0], [44.5, 424.0], [44.6, 424.0], [44.7, 425.0], [44.8, 425.0], [44.9, 426.0], [45.0, 426.0], [45.1, 427.0], [45.2, 427.0], [45.3, 427.0], [45.4, 427.0], [45.5, 428.0], [45.6, 428.0], [45.7, 428.0], [45.8, 429.0], [45.9, 429.0], [46.0, 429.0], [46.1, 429.0], [46.2, 430.0], [46.3, 430.0], [46.4, 431.0], [46.5, 431.0], [46.6, 432.0], [46.7, 432.0], [46.8, 432.0], [46.9, 433.0], [47.0, 433.0], [47.1, 433.0], [47.2, 433.0], [47.3, 434.0], [47.4, 434.0], [47.5, 434.0], [47.6, 434.0], [47.7, 434.0], [47.8, 435.0], [47.9, 435.0], [48.0, 435.0], [48.1, 436.0], [48.2, 436.0], [48.3, 436.0], [48.4, 437.0], [48.5, 437.0], [48.6, 437.0], [48.7, 438.0], [48.8, 438.0], [48.9, 438.0], [49.0, 438.0], [49.1, 439.0], [49.2, 439.0], [49.3, 440.0], [49.4, 440.0], [49.5, 440.0], [49.6, 440.0], [49.7, 440.0], [49.8, 441.0], [49.9, 441.0], [50.0, 442.0], [50.1, 442.0], [50.2, 442.0], [50.3, 442.0], [50.4, 443.0], [50.5, 443.0], [50.6, 444.0], [50.7, 444.0], [50.8, 444.0], [50.9, 445.0], [51.0, 446.0], [51.1, 446.0], [51.2, 446.0], [51.3, 447.0], [51.4, 447.0], [51.5, 448.0], [51.6, 448.0], [51.7, 448.0], [51.8, 448.0], [51.9, 448.0], [52.0, 449.0], [52.1, 450.0], [52.2, 450.0], [52.3, 450.0], [52.4, 450.0], [52.5, 450.0], [52.6, 451.0], [52.7, 451.0], [52.8, 452.0], [52.9, 452.0], [53.0, 452.0], [53.1, 453.0], [53.2, 453.0], [53.3, 453.0], [53.4, 454.0], [53.5, 454.0], [53.6, 454.0], [53.7, 455.0], [53.8, 455.0], [53.9, 455.0], [54.0, 456.0], [54.1, 456.0], [54.2, 456.0], [54.3, 457.0], [54.4, 457.0], [54.5, 457.0], [54.6, 458.0], [54.7, 458.0], [54.8, 458.0], [54.9, 459.0], [55.0, 459.0], [55.1, 459.0], [55.2, 460.0], [55.3, 460.0], [55.4, 460.0], [55.5, 461.0], [55.6, 461.0], [55.7, 462.0], [55.8, 462.0], [55.9, 462.0], [56.0, 462.0], [56.1, 463.0], [56.2, 463.0], [56.3, 463.0], [56.4, 464.0], [56.5, 464.0], [56.6, 464.0], [56.7, 465.0], [56.8, 465.0], [56.9, 465.0], [57.0, 466.0], [57.1, 466.0], [57.2, 466.0], [57.3, 467.0], [57.4, 467.0], [57.5, 468.0], [57.6, 468.0], [57.7, 468.0], [57.8, 469.0], [57.9, 469.0], [58.0, 469.0], [58.1, 469.0], [58.2, 469.0], [58.3, 470.0], [58.4, 470.0], [58.5, 471.0], [58.6, 471.0], [58.7, 471.0], [58.8, 472.0], [58.9, 472.0], [59.0, 472.0], [59.1, 473.0], [59.2, 473.0], [59.3, 474.0], [59.4, 474.0], [59.5, 475.0], [59.6, 476.0], [59.7, 476.0], [59.8, 477.0], [59.9, 477.0], [60.0, 477.0], [60.1, 478.0], [60.2, 478.0], [60.3, 478.0], [60.4, 479.0], [60.5, 479.0], [60.6, 479.0], [60.7, 479.0], [60.8, 480.0], [60.9, 480.0], [61.0, 481.0], [61.1, 481.0], [61.2, 481.0], [61.3, 481.0], [61.4, 481.0], [61.5, 482.0], [61.6, 483.0], [61.7, 483.0], [61.8, 484.0], [61.9, 484.0], [62.0, 484.0], [62.1, 485.0], [62.2, 485.0], [62.3, 485.0], [62.4, 485.0], [62.5, 486.0], [62.6, 487.0], [62.7, 487.0], [62.8, 487.0], [62.9, 488.0], [63.0, 488.0], [63.1, 489.0], [63.2, 489.0], [63.3, 489.0], [63.4, 489.0], [63.5, 489.0], [63.6, 490.0], [63.7, 491.0], [63.8, 491.0], [63.9, 491.0], [64.0, 491.0], [64.1, 491.0], [64.2, 492.0], [64.3, 492.0], [64.4, 493.0], [64.5, 493.0], [64.6, 493.0], [64.7, 494.0], [64.8, 494.0], [64.9, 495.0], [65.0, 496.0], [65.1, 496.0], [65.2, 497.0], [65.3, 497.0], [65.4, 498.0], [65.5, 498.0], [65.6, 498.0], [65.7, 499.0], [65.8, 499.0], [65.9, 500.0], [66.0, 501.0], [66.1, 501.0], [66.2, 502.0], [66.3, 503.0], [66.4, 503.0], [66.5, 504.0], [66.6, 505.0], [66.7, 505.0], [66.8, 505.0], [66.9, 505.0], [67.0, 505.0], [67.1, 507.0], [67.2, 507.0], [67.3, 508.0], [67.4, 508.0], [67.5, 509.0], [67.6, 510.0], [67.7, 510.0], [67.8, 511.0], [67.9, 511.0], [68.0, 511.0], [68.1, 512.0], [68.2, 512.0], [68.3, 512.0], [68.4, 513.0], [68.5, 513.0], [68.6, 513.0], [68.7, 514.0], [68.8, 514.0], [68.9, 515.0], [69.0, 516.0], [69.1, 516.0], [69.2, 517.0], [69.3, 518.0], [69.4, 518.0], [69.5, 519.0], [69.6, 519.0], [69.7, 520.0], [69.8, 521.0], [69.9, 521.0], [70.0, 523.0], [70.1, 523.0], [70.2, 523.0], [70.3, 524.0], [70.4, 524.0], [70.5, 524.0], [70.6, 524.0], [70.7, 524.0], [70.8, 525.0], [70.9, 526.0], [71.0, 526.0], [71.1, 526.0], [71.2, 527.0], [71.3, 527.0], [71.4, 528.0], [71.5, 528.0], [71.6, 529.0], [71.7, 529.0], [71.8, 530.0], [71.9, 531.0], [72.0, 531.0], [72.1, 532.0], [72.2, 533.0], [72.3, 533.0], [72.4, 534.0], [72.5, 534.0], [72.6, 535.0], [72.7, 535.0], [72.8, 536.0], [72.9, 537.0], [73.0, 537.0], [73.1, 537.0], [73.2, 538.0], [73.3, 538.0], [73.4, 539.0], [73.5, 541.0], [73.6, 541.0], [73.7, 542.0], [73.8, 542.0], [73.9, 542.0], [74.0, 543.0], [74.1, 543.0], [74.2, 545.0], [74.3, 545.0], [74.4, 545.0], [74.5, 545.0], [74.6, 546.0], [74.7, 546.0], [74.8, 547.0], [74.9, 547.0], [75.0, 548.0], [75.1, 548.0], [75.2, 549.0], [75.3, 549.0], [75.4, 549.0], [75.5, 549.0], [75.6, 549.0], [75.7, 550.0], [75.8, 551.0], [75.9, 552.0], [76.0, 552.0], [76.1, 552.0], [76.2, 554.0], [76.3, 554.0], [76.4, 555.0], [76.5, 556.0], [76.6, 558.0], [76.7, 558.0], [76.8, 558.0], [76.9, 559.0], [77.0, 560.0], [77.1, 560.0], [77.2, 561.0], [77.3, 562.0], [77.4, 563.0], [77.5, 565.0], [77.6, 565.0], [77.7, 566.0], [77.8, 566.0], [77.9, 567.0], [78.0, 568.0], [78.1, 569.0], [78.2, 570.0], [78.3, 571.0], [78.4, 571.0], [78.5, 574.0], [78.6, 574.0], [78.7, 574.0], [78.8, 575.0], [78.9, 575.0], [79.0, 576.0], [79.1, 577.0], [79.2, 577.0], [79.3, 578.0], [79.4, 579.0], [79.5, 579.0], [79.6, 580.0], [79.7, 581.0], [79.8, 582.0], [79.9, 583.0], [80.0, 584.0], [80.1, 584.0], [80.2, 585.0], [80.3, 585.0], [80.4, 585.0], [80.5, 587.0], [80.6, 588.0], [80.7, 589.0], [80.8, 589.0], [80.9, 591.0], [81.0, 591.0], [81.1, 592.0], [81.2, 593.0], [81.3, 594.0], [81.4, 595.0], [81.5, 596.0], [81.6, 597.0], [81.7, 601.0], [81.8, 602.0], [81.9, 603.0], [82.0, 603.0], [82.1, 604.0], [82.2, 604.0], [82.3, 605.0], [82.4, 605.0], [82.5, 606.0], [82.6, 606.0], [82.7, 607.0], [82.8, 608.0], [82.9, 609.0], [83.0, 610.0], [83.1, 612.0], [83.2, 612.0], [83.3, 614.0], [83.4, 615.0], [83.5, 615.0], [83.6, 617.0], [83.7, 618.0], [83.8, 619.0], [83.9, 621.0], [84.0, 621.0], [84.1, 622.0], [84.2, 623.0], [84.3, 626.0], [84.4, 626.0], [84.5, 627.0], [84.6, 629.0], [84.7, 631.0], [84.8, 631.0], [84.9, 633.0], [85.0, 634.0], [85.1, 635.0], [85.2, 638.0], [85.3, 640.0], [85.4, 642.0], [85.5, 645.0], [85.6, 646.0], [85.7, 647.0], [85.8, 648.0], [85.9, 649.0], [86.0, 650.0], [86.1, 651.0], [86.2, 652.0], [86.3, 653.0], [86.4, 654.0], [86.5, 656.0], [86.6, 656.0], [86.7, 658.0], [86.8, 659.0], [86.9, 660.0], [87.0, 661.0], [87.1, 662.0], [87.2, 666.0], [87.3, 668.0], [87.4, 670.0], [87.5, 674.0], [87.6, 674.0], [87.7, 676.0], [87.8, 676.0], [87.9, 679.0], [88.0, 680.0], [88.1, 680.0], [88.2, 682.0], [88.3, 683.0], [88.4, 684.0], [88.5, 685.0], [88.6, 686.0], [88.7, 689.0], [88.8, 690.0], [88.9, 691.0], [89.0, 692.0], [89.1, 693.0], [89.2, 697.0], [89.3, 698.0], [89.4, 699.0], [89.5, 700.0], [89.6, 702.0], [89.7, 703.0], [89.8, 704.0], [89.9, 705.0], [90.0, 705.0], [90.1, 710.0], [90.2, 712.0], [90.3, 714.0], [90.4, 714.0], [90.5, 716.0], [90.6, 717.0], [90.7, 719.0], [90.8, 721.0], [90.9, 723.0], [91.0, 725.0], [91.1, 725.0], [91.2, 728.0], [91.3, 730.0], [91.4, 733.0], [91.5, 738.0], [91.6, 740.0], [91.7, 745.0], [91.8, 746.0], [91.9, 749.0], [92.0, 750.0], [92.1, 751.0], [92.2, 752.0], [92.3, 755.0], [92.4, 758.0], [92.5, 760.0], [92.6, 760.0], [92.7, 766.0], [92.8, 768.0], [92.9, 771.0], [93.0, 773.0], [93.1, 774.0], [93.2, 777.0], [93.3, 792.0], [93.4, 794.0], [93.5, 796.0], [93.6, 796.0], [93.7, 802.0], [93.8, 813.0], [93.9, 815.0], [94.0, 816.0], [94.1, 819.0], [94.2, 822.0], [94.3, 828.0], [94.4, 831.0], [94.5, 834.0], [94.6, 836.0], [94.7, 843.0], [94.8, 845.0], [94.9, 849.0], [95.0, 851.0], [95.1, 855.0], [95.2, 856.0], [95.3, 864.0], [95.4, 869.0], [95.5, 871.0], [95.6, 873.0], [95.7, 880.0], [95.8, 886.0], [95.9, 890.0], [96.0, 894.0], [96.1, 902.0], [96.2, 904.0], [96.3, 908.0], [96.4, 911.0], [96.5, 929.0], [96.6, 933.0], [96.7, 942.0], [96.8, 944.0], [96.9, 952.0], [97.0, 955.0], [97.1, 960.0], [97.2, 963.0], [97.3, 972.0], [97.4, 976.0], [97.5, 978.0], [97.6, 982.0], [97.7, 989.0], [97.8, 991.0], [97.9, 1001.0], [98.0, 1003.0], [98.1, 1026.0], [98.2, 1028.0], [98.3, 1051.0], [98.4, 1068.0], [98.5, 1106.0], [98.6, 1113.0], [98.7, 1140.0], [98.8, 1147.0], [98.9, 1176.0], [99.0, 1218.0], [99.1, 1246.0], [99.2, 1276.0], [99.3, 1323.0], [99.4, 1345.0], [99.5, 1522.0], [99.6, 1721.0], [99.7, 2481.0], [99.8, 2529.0], [99.9, 7463.0], [100.0, 7681.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 745.0, "series": [{"data": [[600.0, 308.0], [700.0, 277.0], [800.0, 255.0], [900.0, 200.0], [1000.0, 173.0], [1100.0, 123.0], [1200.0, 127.0], [1300.0, 93.0], [1400.0, 66.0], [1500.0, 53.0], [1600.0, 32.0], [100.0, 3.0], [1700.0, 15.0], [1800.0, 19.0], [1900.0, 13.0], [2000.0, 9.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 4.0], [2400.0, 1.0], [2500.0, 2.0], [2600.0, 2.0], [2800.0, 2.0], [2700.0, 1.0], [3100.0, 1.0], [200.0, 16.0], [3200.0, 1.0], [4400.0, 1.0], [300.0, 142.0], [400.0, 244.0], [500.0, 307.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[2300.0, 2.0], [2400.0, 2.0], [600.0, 193.0], [2500.0, 1.0], [700.0, 107.0], [200.0, 157.0], [800.0, 60.0], [900.0, 45.0], [1000.0, 13.0], [1100.0, 13.0], [300.0, 736.0], [1200.0, 8.0], [1300.0, 5.0], [1400.0, 1.0], [1500.0, 1.0], [6100.0, 1.0], [400.0, 745.0], [100.0, 7.0], [6600.0, 1.0], [1700.0, 2.0], [7400.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [500.0, 397.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 178.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2764.0, "series": [{"data": [[0.0, 2058.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2764.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 178.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.431818181818182, "minX": 1.73692092E12, "maxY": 5.0, "series": [{"data": [[1.73692146E12, 5.0], [1.73692116E12, 5.0], [1.73692152E12, 5.0], [1.73692122E12, 5.0], [1.73692092E12, 4.990825688073397], [1.73692158E12, 4.878440366972474], [1.73692128E12, 5.0], [1.73692098E12, 5.0], [1.73692164E12, 2.431818181818182], [1.73692134E12, 5.0], [1.73692104E12, 5.0], [1.7369214E12, 5.0], [1.7369211E12, 5.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73692164E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 347.0, "minX": 1.0, "maxY": 1132.0, "series": [{"data": [[4.0, 655.846153846154], [2.0, 695.5], [1.0, 1132.0], [5.0, 864.2994304312455], [3.0, 687.611111111111]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[4.966800000000009, 861.3751999999993]], "isOverall": false, "label": "OS Process Sampler-Aggregated", "isController": false}, {"data": [[4.0, 543.769230769231], [2.0, 390.0909090909091], [1.0, 347.0], [5.0, 500.5431244914562], [3.0, 460.2941176470589]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[4.966400000000001, 499.9467999999997]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 5.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 518.1, "minX": 1.73692092E12, "maxY": 28492.033333333333, "series": [{"data": [[1.73692146E12, 25093.616666666665], [1.73692116E12, 26352.65], [1.73692152E12, 26935.733333333334], [1.73692122E12, 27534.433333333334], [1.73692092E12, 6479.983333333334], [1.73692158E12, 26186.633333333335], [1.73692128E12, 28492.033333333333], [1.73692098E12, 25275.15], [1.73692164E12, 2633.75], [1.73692134E12, 26680.766666666666], [1.73692104E12, 25603.383333333335], [1.7369214E12, 25082.25], [1.7369211E12, 26935.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73692146E12, 4945.5], [1.73692116E12, 5181.0], [1.73692152E12, 5298.75], [1.73692122E12, 5416.5], [1.73692092E12, 1271.7], [1.73692158E12, 5157.45], [1.73692128E12, 5604.9], [1.73692098E12, 4969.05], [1.73692164E12, 518.1], [1.73692134E12, 5251.65], [1.73692104E12, 5039.7], [1.7369214E12, 4921.95], [1.7369211E12, 5298.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73692164E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 446.8636363636363, "minX": 1.73692092E12, "maxY": 888.7636363636362, "series": [{"data": [[1.73692146E12, 875.942028985507], [1.73692116E12, 877.1583710407235], [1.73692152E12, 887.9822222222219], [1.73692122E12, 839.595652173913], [1.73692092E12, 888.7636363636362], [1.73692158E12, 851.6543778801839], [1.73692128E12, 812.5000000000001], [1.73692098E12, 881.5566037735849], [1.73692164E12, 736.0909090909089], [1.73692134E12, 872.0990990990991], [1.73692104E12, 865.417840375587], [1.7369214E12, 871.5962441314551], [1.7369211E12, 851.657777777777]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.73692146E12, 635.4904761904755], [1.73692116E12, 477.5863636363637], [1.73692152E12, 449.83111111111117], [1.73692122E12, 460.5347826086957], [1.73692092E12, 764.0370370370371], [1.73692158E12, 492.1415525114156], [1.73692128E12, 450.61764705882337], [1.73692098E12, 533.7867298578199], [1.73692164E12, 446.8636363636363], [1.73692134E12, 467.5156950672646], [1.73692104E12, 535.710280373832], [1.7369214E12, 467.73684210526324], [1.7369211E12, 483.60444444444454]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73692164E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73692092E12, "maxY": 763.9074074074076, "series": [{"data": [[1.73692146E12, 0.0], [1.73692116E12, 0.0], [1.73692152E12, 0.0], [1.73692122E12, 0.0], [1.73692092E12, 0.0], [1.73692158E12, 0.0], [1.73692128E12, 0.0], [1.73692098E12, 0.0], [1.73692164E12, 0.0], [1.73692134E12, 0.0], [1.73692104E12, 0.0], [1.7369214E12, 0.0], [1.7369211E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.73692146E12, 634.690476190476], [1.73692116E12, 477.5227272727275], [1.73692152E12, 449.8088888888889], [1.73692122E12, 460.48260869565206], [1.73692092E12, 763.9074074074076], [1.73692158E12, 492.07762557077626], [1.73692128E12, 450.5336134453779], [1.73692098E12, 533.6303317535546], [1.73692164E12, 446.8181818181818], [1.73692134E12, 467.4484304932739], [1.73692104E12, 535.4158878504674], [1.7369214E12, 467.5311004784687], [1.7369211E12, 483.53777777777765]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73692164E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73692092E12, "maxY": 161.09259259259255, "series": [{"data": [[1.73692146E12, 0.0], [1.73692116E12, 0.0], [1.73692152E12, 0.0], [1.73692122E12, 0.0], [1.73692092E12, 0.0], [1.73692158E12, 0.0], [1.73692128E12, 0.0], [1.73692098E12, 0.0], [1.73692164E12, 0.0], [1.73692134E12, 0.0], [1.73692104E12, 0.0], [1.7369214E12, 0.0], [1.7369211E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.73692146E12, 1.7809523809523802], [1.73692116E12, 1.2500000000000002], [1.73692152E12, 1.6933333333333331], [1.73692122E12, 1.5913043478260869], [1.73692092E12, 161.09259259259255], [1.73692158E12, 1.515981735159818], [1.73692128E12, 0.7352941176470585], [1.73692098E12, 1.8009478672985788], [1.73692164E12, 0.0], [1.73692134E12, 5.623318385650228], [1.73692104E12, 1.523364485981308], [1.7369214E12, 1.2248803827751191], [1.7369211E12, 0.7866666666666667]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73692164E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 124.0, "minX": 1.73692092E12, "maxY": 7681.0, "series": [{"data": [[1.73692146E12, 7681.0], [1.73692116E12, 2546.0], [1.73692152E12, 4428.0], [1.73692122E12, 2054.0], [1.73692092E12, 2529.0], [1.73692158E12, 3193.0], [1.73692128E12, 2833.0], [1.73692098E12, 2248.0], [1.73692164E12, 1418.0], [1.73692134E12, 2873.0], [1.73692104E12, 2529.0], [1.7369214E12, 2734.0], [1.7369211E12, 2653.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73692146E12, 1222.8], [1.73692116E12, 1173.2000000000003], [1.73692152E12, 1213.2000000000003], [1.73692122E12, 1072.8000000000002], [1.73692092E12, 1471.0], [1.73692158E12, 1160.4], [1.73692128E12, 1084.6], [1.73692098E12, 1248.4], [1.73692164E12, 1029.0], [1.73692134E12, 1219.8000000000002], [1.73692104E12, 1177.1999999999998], [1.7369214E12, 1203.8], [1.7369211E12, 1134.8000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73692146E12, 6571.159999999996], [1.73692116E12, 2089.3199999999974], [1.73692152E12, 1820.8400000000001], [1.73692122E12, 1840.8999999999985], [1.73692092E12, 2524.7000000000003], [1.73692158E12, 1844.7599999999998], [1.73692128E12, 1813.3000000000002], [1.73692098E12, 1988.3599999999997], [1.73692164E12, 1418.0], [1.73692134E12, 1995.2800000000007], [1.73692104E12, 1828.2799999999986], [1.7369214E12, 1997.85], [1.7369211E12, 2139.8700000000017]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73692146E12, 1489.7999999999997], [1.73692116E12, 1422.2999999999997], [1.73692152E12, 1379.8], [1.73692122E12, 1287.75], [1.73692092E12, 2081.5], [1.73692158E12, 1305.0499999999997], [1.73692128E12, 1357.15], [1.73692098E12, 1427.7999999999997], [1.73692164E12, 1198.0], [1.73692134E12, 1419.8], [1.73692104E12, 1416.7999999999995], [1.7369214E12, 1412.1499999999994], [1.7369211E12, 1395.6999999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73692146E12, 192.0], [1.73692116E12, 236.0], [1.73692152E12, 185.0], [1.73692122E12, 212.0], [1.73692092E12, 299.0], [1.73692158E12, 247.0], [1.73692128E12, 124.0], [1.73692098E12, 234.0], [1.73692164E12, 241.0], [1.73692134E12, 241.0], [1.73692104E12, 173.0], [1.7369214E12, 248.0], [1.7369211E12, 218.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73692146E12, 579.0], [1.73692116E12, 556.0], [1.73692152E12, 538.0], [1.73692122E12, 549.5], [1.73692092E12, 656.0], [1.73692158E12, 561.0], [1.73692128E12, 522.0], [1.73692098E12, 608.0], [1.73692164E12, 480.5], [1.73692134E12, 547.0], [1.73692104E12, 601.0], [1.7369214E12, 544.5], [1.7369211E12, 550.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73692164E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 242.0, "minX": 1.0, "maxY": 1860.0, "series": [{"data": [[2.0, 1860.0], [8.0, 544.0], [9.0, 537.5], [10.0, 514.0], [11.0, 445.5], [3.0, 1127.0], [12.0, 402.5], [13.0, 345.0], [1.0, 1513.5], [4.0, 733.5], [17.0, 242.0], [5.0, 735.0], [6.0, 584.5], [7.0, 571.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1150.5, "series": [{"data": [[2.0, 1150.5], [8.0, 266.5], [9.0, 203.5], [10.0, 0.0], [11.0, 0.0], [3.0, 0.0], [12.0, 182.0], [13.0, 216.0], [1.0, 0.0], [4.0, 0.0], [17.0, 0.0], [5.0, 0.0], [6.0, 281.0], [7.0, 234.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6833333333333333, "minX": 1.73692092E12, "maxY": 7.933333333333334, "series": [{"data": [[1.73692146E12, 6.95], [1.73692116E12, 7.35], [1.73692152E12, 7.5], [1.73692122E12, 7.666666666666667], [1.73692092E12, 1.9], [1.73692158E12, 7.233333333333333], [1.73692128E12, 7.933333333333334], [1.73692098E12, 7.05], [1.73692164E12, 0.6833333333333333], [1.73692134E12, 7.416666666666667], [1.73692104E12, 7.116666666666666], [1.7369214E12, 7.033333333333333], [1.7369211E12, 7.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73692164E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.73692092E12, "maxY": 3.966666666666667, "series": [{"data": [[1.73692146E12, 3.45], [1.73692116E12, 3.683333333333333], [1.73692152E12, 3.75], [1.73692122E12, 3.8333333333333335], [1.73692092E12, 0.9166666666666666], [1.73692158E12, 3.6166666666666667], [1.73692128E12, 3.966666666666667], [1.73692098E12, 3.533333333333333], [1.73692164E12, 0.36666666666666664], [1.73692134E12, 3.7], [1.73692104E12, 3.55], [1.7369214E12, 3.55], [1.7369211E12, 3.75]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.73692146E12, 3.5], [1.73692116E12, 3.6666666666666665], [1.73692152E12, 3.75], [1.73692122E12, 3.8333333333333335], [1.73692092E12, 0.9], [1.73692158E12, 3.65], [1.73692128E12, 3.966666666666667], [1.73692098E12, 3.5166666666666666], [1.73692164E12, 0.36666666666666664], [1.73692134E12, 3.716666666666667], [1.73692104E12, 3.566666666666667], [1.7369214E12, 3.4833333333333334], [1.7369211E12, 3.75]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73692164E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.73692092E12, "maxY": 3.966666666666667, "series": [{"data": [[1.73692146E12, 3.45], [1.73692116E12, 3.683333333333333], [1.73692152E12, 3.75], [1.73692122E12, 3.8333333333333335], [1.73692092E12, 0.9166666666666666], [1.73692158E12, 3.6166666666666667], [1.73692128E12, 3.966666666666667], [1.73692098E12, 3.533333333333333], [1.73692164E12, 0.36666666666666664], [1.73692134E12, 3.7], [1.73692104E12, 3.55], [1.7369214E12, 3.55], [1.7369211E12, 3.75]], "isOverall": false, "label": "OS Process Sampler-success", "isController": false}, {"data": [[1.73692146E12, 3.5], [1.73692116E12, 3.6666666666666665], [1.73692152E12, 3.75], [1.73692122E12, 3.8333333333333335], [1.73692092E12, 0.9], [1.73692158E12, 3.65], [1.73692128E12, 3.966666666666667], [1.73692098E12, 3.5166666666666666], [1.73692164E12, 0.36666666666666664], [1.73692134E12, 3.716666666666667], [1.73692104E12, 3.566666666666667], [1.7369214E12, 3.4833333333333334], [1.7369211E12, 3.75]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73692164E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7333333333333333, "minX": 1.73692092E12, "maxY": 7.933333333333334, "series": [{"data": [[1.73692146E12, 6.95], [1.73692116E12, 7.35], [1.73692152E12, 7.5], [1.73692122E12, 7.666666666666667], [1.73692092E12, 1.8166666666666667], [1.73692158E12, 7.266666666666667], [1.73692128E12, 7.933333333333334], [1.73692098E12, 7.05], [1.73692164E12, 0.7333333333333333], [1.73692134E12, 7.416666666666667], [1.73692104E12, 7.116666666666666], [1.7369214E12, 7.033333333333333], [1.7369211E12, 7.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73692164E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

