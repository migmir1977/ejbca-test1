/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 158.0, "minX": 0.0, "maxY": 839964.0, "series": [{"data": [[0.0, 158.0], [0.1, 158.0], [0.2, 158.0], [0.3, 158.0], [0.4, 163.0], [0.5, 163.0], [0.6, 163.0], [0.7, 179.0], [0.8, 179.0], [0.9, 179.0], [1.0, 182.0], [1.1, 182.0], [1.2, 182.0], [1.3, 182.0], [1.4, 185.0], [1.5, 185.0], [1.6, 185.0], [1.7, 201.0], [1.8, 201.0], [1.9, 201.0], [2.0, 217.0], [2.1, 217.0], [2.2, 217.0], [2.3, 217.0], [2.4, 223.0], [2.5, 223.0], [2.6, 223.0], [2.7, 237.0], [2.8, 237.0], [2.9, 237.0], [3.0, 242.0], [3.1, 242.0], [3.2, 242.0], [3.3, 242.0], [3.4, 247.0], [3.5, 247.0], [3.6, 247.0], [3.7, 247.0], [3.8, 247.0], [3.9, 247.0], [4.0, 249.0], [4.1, 249.0], [4.2, 249.0], [4.3, 249.0], [4.4, 252.0], [4.5, 252.0], [4.6, 252.0], [4.7, 256.0], [4.8, 256.0], [4.9, 256.0], [5.0, 260.0], [5.1, 260.0], [5.2, 260.0], [5.3, 260.0], [5.4, 260.0], [5.5, 260.0], [5.6, 260.0], [5.7, 275.0], [5.8, 275.0], [5.9, 275.0], [6.0, 279.0], [6.1, 279.0], [6.2, 279.0], [6.3, 279.0], [6.4, 279.0], [6.5, 279.0], [6.6, 279.0], [6.7, 281.0], [6.8, 281.0], [6.9, 281.0], [7.0, 281.0], [7.1, 281.0], [7.2, 281.0], [7.3, 281.0], [7.4, 284.0], [7.5, 284.0], [7.6, 284.0], [7.7, 285.0], [7.8, 285.0], [7.9, 285.0], [8.0, 287.0], [8.1, 287.0], [8.2, 287.0], [8.3, 287.0], [8.4, 291.0], [8.5, 291.0], [8.6, 291.0], [8.7, 294.0], [8.8, 294.0], [8.9, 294.0], [9.0, 296.0], [9.1, 296.0], [9.2, 296.0], [9.3, 296.0], [9.4, 301.0], [9.5, 301.0], [9.6, 301.0], [9.7, 302.0], [9.8, 302.0], [9.9, 302.0], [10.0, 302.0], [10.1, 307.0], [10.2, 307.0], [10.3, 307.0], [10.4, 312.0], [10.5, 312.0], [10.6, 312.0], [10.7, 320.0], [10.8, 320.0], [10.9, 320.0], [11.0, 320.0], [11.1, 321.0], [11.2, 321.0], [11.3, 321.0], [11.4, 324.0], [11.5, 324.0], [11.6, 324.0], [11.7, 327.0], [11.8, 327.0], [11.9, 327.0], [12.0, 327.0], [12.1, 329.0], [12.2, 329.0], [12.3, 329.0], [12.4, 333.0], [12.5, 333.0], [12.6, 333.0], [12.7, 337.0], [12.8, 337.0], [12.9, 337.0], [13.0, 337.0], [13.1, 344.0], [13.2, 344.0], [13.3, 344.0], [13.4, 351.0], [13.5, 351.0], [13.6, 351.0], [13.7, 358.0], [13.8, 358.0], [13.9, 358.0], [14.0, 358.0], [14.1, 368.0], [14.2, 368.0], [14.3, 368.0], [14.4, 368.0], [14.5, 368.0], [14.6, 368.0], [14.7, 371.0], [14.8, 371.0], [14.9, 371.0], [15.0, 371.0], [15.1, 379.0], [15.2, 379.0], [15.3, 379.0], [15.4, 380.0], [15.5, 380.0], [15.6, 380.0], [15.7, 386.0], [15.8, 386.0], [15.9, 386.0], [16.0, 386.0], [16.1, 389.0], [16.2, 389.0], [16.3, 389.0], [16.4, 389.0], [16.5, 389.0], [16.6, 389.0], [16.7, 392.0], [16.8, 392.0], [16.9, 392.0], [17.0, 392.0], [17.1, 396.0], [17.2, 396.0], [17.3, 396.0], [17.4, 404.0], [17.5, 404.0], [17.6, 404.0], [17.7, 404.0], [17.8, 404.0], [17.9, 404.0], [18.0, 404.0], [18.1, 409.0], [18.2, 409.0], [18.3, 409.0], [18.4, 410.0], [18.5, 410.0], [18.6, 410.0], [18.7, 414.0], [18.8, 414.0], [18.9, 414.0], [19.0, 414.0], [19.1, 429.0], [19.2, 429.0], [19.3, 429.0], [19.4, 429.0], [19.5, 429.0], [19.6, 429.0], [19.7, 429.0], [19.8, 429.0], [19.9, 429.0], [20.0, 429.0], [20.1, 430.0], [20.2, 430.0], [20.3, 430.0], [20.4, 437.0], [20.5, 437.0], [20.6, 437.0], [20.7, 440.0], [20.8, 440.0], [20.9, 440.0], [21.0, 440.0], [21.1, 441.0], [21.2, 441.0], [21.3, 441.0], [21.4, 442.0], [21.5, 442.0], [21.6, 442.0], [21.7, 448.0], [21.8, 448.0], [21.9, 448.0], [22.0, 450.0], [22.1, 450.0], [22.2, 450.0], [22.3, 450.0], [22.4, 450.0], [22.5, 450.0], [22.6, 450.0], [22.7, 455.0], [22.8, 455.0], [22.9, 455.0], [23.0, 462.0], [23.1, 462.0], [23.2, 462.0], [23.3, 462.0], [23.4, 464.0], [23.5, 464.0], [23.6, 464.0], [23.7, 466.0], [23.8, 466.0], [23.9, 466.0], [24.0, 479.0], [24.1, 479.0], [24.2, 479.0], [24.3, 479.0], [24.4, 490.0], [24.5, 490.0], [24.6, 490.0], [24.7, 493.0], [24.8, 493.0], [24.9, 493.0], [25.0, 495.0], [25.1, 495.0], [25.2, 495.0], [25.3, 495.0], [25.4, 495.0], [25.5, 495.0], [25.6, 495.0], [25.7, 512.0], [25.8, 512.0], [25.9, 512.0], [26.0, 512.0], [26.1, 512.0], [26.2, 512.0], [26.3, 512.0], [26.4, 513.0], [26.5, 513.0], [26.6, 513.0], [26.7, 514.0], [26.8, 514.0], [26.9, 514.0], [27.0, 516.0], [27.1, 516.0], [27.2, 516.0], [27.3, 516.0], [27.4, 517.0], [27.5, 517.0], [27.6, 517.0], [27.7, 521.0], [27.8, 521.0], [27.9, 521.0], [28.0, 522.0], [28.1, 522.0], [28.2, 522.0], [28.3, 522.0], [28.4, 524.0], [28.5, 524.0], [28.6, 524.0], [28.7, 525.0], [28.8, 525.0], [28.9, 525.0], [29.0, 527.0], [29.1, 527.0], [29.2, 527.0], [29.3, 527.0], [29.4, 530.0], [29.5, 530.0], [29.6, 530.0], [29.7, 535.0], [29.8, 535.0], [29.9, 535.0], [30.0, 545.0], [30.1, 545.0], [30.2, 545.0], [30.3, 545.0], [30.4, 549.0], [30.5, 549.0], [30.6, 549.0], [30.7, 549.0], [30.8, 549.0], [30.9, 549.0], [31.0, 552.0], [31.1, 552.0], [31.2, 552.0], [31.3, 552.0], [31.4, 558.0], [31.5, 558.0], [31.6, 558.0], [31.7, 560.0], [31.8, 560.0], [31.9, 560.0], [32.0, 560.0], [32.1, 560.0], [32.2, 560.0], [32.3, 560.0], [32.4, 568.0], [32.5, 568.0], [32.6, 568.0], [32.7, 572.0], [32.8, 572.0], [32.9, 572.0], [33.0, 576.0], [33.1, 576.0], [33.2, 576.0], [33.3, 576.0], [33.4, 581.0], [33.5, 581.0], [33.6, 581.0], [33.7, 584.0], [33.8, 584.0], [33.9, 584.0], [34.0, 587.0], [34.1, 587.0], [34.2, 587.0], [34.3, 587.0], [34.4, 590.0], [34.5, 590.0], [34.6, 590.0], [34.7, 592.0], [34.8, 592.0], [34.9, 592.0], [35.0, 595.0], [35.1, 595.0], [35.2, 595.0], [35.3, 595.0], [35.4, 600.0], [35.5, 600.0], [35.6, 600.0], [35.7, 602.0], [35.8, 602.0], [35.9, 602.0], [36.0, 602.0], [36.1, 605.0], [36.2, 605.0], [36.3, 605.0], [36.4, 620.0], [36.5, 620.0], [36.6, 620.0], [36.7, 621.0], [36.8, 621.0], [36.9, 621.0], [37.0, 621.0], [37.1, 637.0], [37.2, 637.0], [37.3, 637.0], [37.4, 639.0], [37.5, 639.0], [37.6, 639.0], [37.7, 646.0], [37.8, 646.0], [37.9, 646.0], [38.0, 646.0], [38.1, 647.0], [38.2, 647.0], [38.3, 647.0], [38.4, 673.0], [38.5, 673.0], [38.6, 673.0], [38.7, 683.0], [38.8, 683.0], [38.9, 683.0], [39.0, 683.0], [39.1, 702.0], [39.2, 702.0], [39.3, 702.0], [39.4, 705.0], [39.5, 705.0], [39.6, 705.0], [39.7, 715.0], [39.8, 715.0], [39.9, 715.0], [40.0, 715.0], [40.1, 721.0], [40.2, 721.0], [40.3, 721.0], [40.4, 727.0], [40.5, 727.0], [40.6, 727.0], [40.7, 735.0], [40.8, 735.0], [40.9, 735.0], [41.0, 735.0], [41.1, 775.0], [41.2, 775.0], [41.3, 775.0], [41.4, 778.0], [41.5, 778.0], [41.6, 778.0], [41.7, 803.0], [41.8, 803.0], [41.9, 803.0], [42.0, 803.0], [42.1, 803.0], [42.2, 803.0], [42.3, 803.0], [42.4, 812.0], [42.5, 812.0], [42.6, 812.0], [42.7, 832.0], [42.8, 832.0], [42.9, 832.0], [43.0, 832.0], [43.1, 859.0], [43.2, 859.0], [43.3, 859.0], [43.4, 873.0], [43.5, 873.0], [43.6, 873.0], [43.7, 873.0], [43.8, 873.0], [43.9, 873.0], [44.0, 873.0], [44.1, 877.0], [44.2, 877.0], [44.3, 877.0], [44.4, 884.0], [44.5, 884.0], [44.6, 884.0], [44.7, 900.0], [44.8, 900.0], [44.9, 900.0], [45.0, 900.0], [45.1, 906.0], [45.2, 906.0], [45.3, 906.0], [45.4, 907.0], [45.5, 907.0], [45.6, 907.0], [45.7, 938.0], [45.8, 938.0], [45.9, 938.0], [46.0, 938.0], [46.1, 949.0], [46.2, 949.0], [46.3, 949.0], [46.4, 967.0], [46.5, 967.0], [46.6, 967.0], [46.7, 986.0], [46.8, 986.0], [46.9, 986.0], [47.0, 986.0], [47.1, 1003.0], [47.2, 1003.0], [47.3, 1003.0], [47.4, 1008.0], [47.5, 1008.0], [47.6, 1008.0], [47.7, 1009.0], [47.8, 1009.0], [47.9, 1009.0], [48.0, 1009.0], [48.1, 1021.0], [48.2, 1021.0], [48.3, 1021.0], [48.4, 1028.0], [48.5, 1028.0], [48.6, 1028.0], [48.7, 1040.0], [48.8, 1040.0], [48.9, 1040.0], [49.0, 1040.0], [49.1, 1042.0], [49.2, 1042.0], [49.3, 1042.0], [49.4, 1060.0], [49.5, 1060.0], [49.6, 1060.0], [49.7, 1061.0], [49.8, 1061.0], [49.9, 1061.0], [50.0, 1061.0], [50.1, 1063.0], [50.2, 1063.0], [50.3, 1063.0], [50.4, 1065.0], [50.5, 1065.0], [50.6, 1065.0], [50.7, 1080.0], [50.8, 1080.0], [50.9, 1080.0], [51.0, 1080.0], [51.1, 1099.0], [51.2, 1099.0], [51.3, 1099.0], [51.4, 1112.0], [51.5, 1112.0], [51.6, 1112.0], [51.7, 1117.0], [51.8, 1117.0], [51.9, 1117.0], [52.0, 1117.0], [52.1, 1122.0], [52.2, 1122.0], [52.3, 1122.0], [52.4, 1130.0], [52.5, 1130.0], [52.6, 1130.0], [52.7, 1140.0], [52.8, 1140.0], [52.9, 1140.0], [53.0, 1140.0], [53.1, 1143.0], [53.2, 1143.0], [53.3, 1143.0], [53.4, 1168.0], [53.5, 1168.0], [53.6, 1168.0], [53.7, 1205.0], [53.8, 1205.0], [53.9, 1205.0], [54.0, 1205.0], [54.1, 1252.0], [54.2, 1252.0], [54.3, 1252.0], [54.4, 1317.0], [54.5, 1317.0], [54.6, 1317.0], [54.7, 1331.0], [54.8, 1331.0], [54.9, 1331.0], [55.0, 1331.0], [55.1, 1334.0], [55.2, 1334.0], [55.3, 1334.0], [55.4, 1356.0], [55.5, 1356.0], [55.6, 1356.0], [55.7, 1357.0], [55.8, 1357.0], [55.9, 1357.0], [56.0, 1357.0], [56.1, 1429.0], [56.2, 1429.0], [56.3, 1429.0], [56.4, 1449.0], [56.5, 1449.0], [56.6, 1449.0], [56.7, 1453.0], [56.8, 1453.0], [56.9, 1453.0], [57.0, 1453.0], [57.1, 1476.0], [57.2, 1476.0], [57.3, 1476.0], [57.4, 1485.0], [57.5, 1485.0], [57.6, 1485.0], [57.7, 1520.0], [57.8, 1520.0], [57.9, 1520.0], [58.0, 1520.0], [58.1, 1521.0], [58.2, 1521.0], [58.3, 1521.0], [58.4, 1543.0], [58.5, 1543.0], [58.6, 1543.0], [58.7, 1549.0], [58.8, 1549.0], [58.9, 1549.0], [59.0, 1549.0], [59.1, 1552.0], [59.2, 1552.0], [59.3, 1552.0], [59.4, 1562.0], [59.5, 1562.0], [59.6, 1562.0], [59.7, 1609.0], [59.8, 1609.0], [59.9, 1609.0], [60.0, 1609.0], [60.1, 1615.0], [60.2, 1615.0], [60.3, 1615.0], [60.4, 1652.0], [60.5, 1652.0], [60.6, 1652.0], [60.7, 1666.0], [60.8, 1666.0], [60.9, 1666.0], [61.0, 1666.0], [61.1, 1677.0], [61.2, 1677.0], [61.3, 1677.0], [61.4, 1767.0], [61.5, 1767.0], [61.6, 1767.0], [61.7, 1769.0], [61.8, 1769.0], [61.9, 1769.0], [62.0, 1769.0], [62.1, 1871.0], [62.2, 1871.0], [62.3, 1871.0], [62.4, 1881.0], [62.5, 1881.0], [62.6, 1881.0], [62.7, 1895.0], [62.8, 1895.0], [62.9, 1895.0], [63.0, 1895.0], [63.1, 1931.0], [63.2, 1931.0], [63.3, 1931.0], [63.4, 1973.0], [63.5, 1973.0], [63.6, 1973.0], [63.7, 1987.0], [63.8, 1987.0], [63.9, 1987.0], [64.0, 1987.0], [64.1, 2029.0], [64.2, 2029.0], [64.3, 2029.0], [64.4, 2055.0], [64.5, 2055.0], [64.6, 2055.0], [64.7, 2161.0], [64.8, 2161.0], [64.9, 2161.0], [65.0, 2161.0], [65.1, 2166.0], [65.2, 2166.0], [65.3, 2166.0], [65.4, 2177.0], [65.5, 2177.0], [65.6, 2177.0], [65.7, 2195.0], [65.8, 2195.0], [65.9, 2195.0], [66.0, 2195.0], [66.1, 2217.0], [66.2, 2217.0], [66.3, 2217.0], [66.4, 2227.0], [66.5, 2227.0], [66.6, 2227.0], [66.7, 2238.0], [66.8, 2238.0], [66.9, 2238.0], [67.0, 2238.0], [67.1, 2343.0], [67.2, 2343.0], [67.3, 2343.0], [67.4, 2487.0], [67.5, 2487.0], [67.6, 2487.0], [67.7, 2503.0], [67.8, 2503.0], [67.9, 2503.0], [68.0, 2503.0], [68.1, 2506.0], [68.2, 2506.0], [68.3, 2506.0], [68.4, 2566.0], [68.5, 2566.0], [68.6, 2566.0], [68.7, 2659.0], [68.8, 2659.0], [68.9, 2659.0], [69.0, 2659.0], [69.1, 2687.0], [69.2, 2687.0], [69.3, 2687.0], [69.4, 2689.0], [69.5, 2689.0], [69.6, 2689.0], [69.7, 2828.0], [69.8, 2828.0], [69.9, 2828.0], [70.0, 2828.0], [70.1, 3482.0], [70.2, 3482.0], [70.3, 3482.0], [70.4, 3647.0], [70.5, 3647.0], [70.6, 3647.0], [70.7, 3923.0], [70.8, 3923.0], [70.9, 3923.0], [71.0, 3923.0], [71.1, 3969.0], [71.2, 3969.0], [71.3, 3969.0], [71.4, 4308.0], [71.5, 4308.0], [71.6, 4308.0], [71.7, 4347.0], [71.8, 4347.0], [71.9, 4347.0], [72.0, 4347.0], [72.1, 4611.0], [72.2, 4611.0], [72.3, 4611.0], [72.4, 4672.0], [72.5, 4672.0], [72.6, 4672.0], [72.7, 4673.0], [72.8, 4673.0], [72.9, 4673.0], [73.0, 4673.0], [73.1, 5210.0], [73.2, 5210.0], [73.3, 5210.0], [73.4, 5378.0], [73.5, 5378.0], [73.6, 5378.0], [73.7, 5461.0], [73.8, 5461.0], [73.9, 5461.0], [74.0, 5461.0], [74.1, 5999.0], [74.2, 5999.0], [74.3, 5999.0], [74.4, 6288.0], [74.5, 6288.0], [74.6, 6288.0], [74.7, 6422.0], [74.8, 6422.0], [74.9, 6422.0], [75.0, 6422.0], [75.1, 6878.0], [75.2, 6878.0], [75.3, 6878.0], [75.4, 6938.0], [75.5, 6938.0], [75.6, 6938.0], [75.7, 6944.0], [75.8, 6944.0], [75.9, 6944.0], [76.0, 6944.0], [76.1, 7077.0], [76.2, 7077.0], [76.3, 7077.0], [76.4, 7132.0], [76.5, 7132.0], [76.6, 7132.0], [76.7, 7279.0], [76.8, 7279.0], [76.9, 7279.0], [77.0, 7447.0], [77.1, 7447.0], [77.2, 7447.0], [77.3, 7447.0], [77.4, 7876.0], [77.5, 7876.0], [77.6, 7876.0], [77.7, 8346.0], [77.8, 8346.0], [77.9, 8346.0], [78.0, 8404.0], [78.1, 8404.0], [78.2, 8404.0], [78.3, 8404.0], [78.4, 8416.0], [78.5, 8416.0], [78.6, 8416.0], [78.7, 8438.0], [78.8, 8438.0], [78.9, 8438.0], [79.0, 8472.0], [79.1, 8472.0], [79.2, 8472.0], [79.3, 8472.0], [79.4, 8679.0], [79.5, 8679.0], [79.6, 8679.0], [79.7, 8684.0], [79.8, 8684.0], [79.9, 8684.0], [80.0, 9033.0], [80.1, 9033.0], [80.2, 9033.0], [80.3, 9033.0], [80.4, 9237.0], [80.5, 9237.0], [80.6, 9237.0], [80.7, 9404.0], [80.8, 9404.0], [80.9, 9404.0], [81.0, 9438.0], [81.1, 9438.0], [81.2, 9438.0], [81.3, 9438.0], [81.4, 9563.0], [81.5, 9563.0], [81.6, 9563.0], [81.7, 9676.0], [81.8, 9676.0], [81.9, 9676.0], [82.0, 9678.0], [82.1, 9678.0], [82.2, 9678.0], [82.3, 9678.0], [82.4, 9707.0], [82.5, 9707.0], [82.6, 9707.0], [82.7, 9740.0], [82.8, 9740.0], [82.9, 9740.0], [83.0, 9792.0], [83.1, 9792.0], [83.2, 9792.0], [83.3, 9792.0], [83.4, 9817.0], [83.5, 9817.0], [83.6, 9817.0], [83.7, 9936.0], [83.8, 9936.0], [83.9, 9936.0], [84.0, 9999.0], [84.1, 9999.0], [84.2, 9999.0], [84.3, 9999.0], [84.4, 10279.0], [84.5, 10279.0], [84.6, 10279.0], [84.7, 10856.0], [84.8, 10856.0], [84.9, 10856.0], [85.0, 10890.0], [85.1, 10890.0], [85.2, 10890.0], [85.3, 10890.0], [85.4, 10968.0], [85.5, 10968.0], [85.6, 10968.0], [85.7, 11017.0], [85.8, 11017.0], [85.9, 11017.0], [86.0, 11200.0], [86.1, 11200.0], [86.2, 11200.0], [86.3, 11200.0], [86.4, 11290.0], [86.5, 11290.0], [86.6, 11290.0], [86.7, 11317.0], [86.8, 11317.0], [86.9, 11317.0], [87.0, 11454.0], [87.1, 11454.0], [87.2, 11454.0], [87.3, 11454.0], [87.4, 11577.0], [87.5, 11577.0], [87.6, 11577.0], [87.7, 11589.0], [87.8, 11589.0], [87.9, 11589.0], [88.0, 11818.0], [88.1, 11818.0], [88.2, 11818.0], [88.3, 11818.0], [88.4, 12030.0], [88.5, 12030.0], [88.6, 12030.0], [88.7, 12124.0], [88.8, 12124.0], [88.9, 12124.0], [89.0, 12159.0], [89.1, 12159.0], [89.2, 12159.0], [89.3, 12159.0], [89.4, 12190.0], [89.5, 12190.0], [89.6, 12190.0], [89.7, 12296.0], [89.8, 12296.0], [89.9, 12296.0], [90.0, 12509.0], [90.1, 12509.0], [90.2, 12509.0], [90.3, 12509.0], [90.4, 12649.0], [90.5, 12649.0], [90.6, 12649.0], [90.7, 13092.0], [90.8, 13092.0], [90.9, 13092.0], [91.0, 13132.0], [91.1, 13132.0], [91.2, 13132.0], [91.3, 13132.0], [91.4, 13241.0], [91.5, 13241.0], [91.6, 13241.0], [91.7, 13245.0], [91.8, 13245.0], [91.9, 13245.0], [92.0, 13271.0], [92.1, 13271.0], [92.2, 13271.0], [92.3, 13271.0], [92.4, 13350.0], [92.5, 13350.0], [92.6, 13350.0], [92.7, 13443.0], [92.8, 13443.0], [92.9, 13443.0], [93.0, 13520.0], [93.1, 13520.0], [93.2, 13520.0], [93.3, 13520.0], [93.4, 13624.0], [93.5, 13624.0], [93.6, 13624.0], [93.7, 14142.0], [93.8, 14142.0], [93.9, 14142.0], [94.0, 14149.0], [94.1, 14149.0], [94.2, 14149.0], [94.3, 14149.0], [94.4, 14152.0], [94.5, 14152.0], [94.6, 14152.0], [94.7, 14292.0], [94.8, 14292.0], [94.9, 14292.0], [95.0, 14375.0], [95.1, 14375.0], [95.2, 14375.0], [95.3, 14375.0], [95.4, 14486.0], [95.5, 14486.0], [95.6, 14486.0], [95.7, 14488.0], [95.8, 14488.0], [95.9, 14488.0], [96.0, 15063.0], [96.1, 15063.0], [96.2, 15063.0], [96.3, 15063.0], [96.4, 16565.0], [96.5, 16565.0], [96.6, 16565.0], [96.7, 16734.0], [96.8, 16734.0], [96.9, 16734.0], [97.0, 16751.0], [97.1, 16751.0], [97.2, 16751.0], [97.3, 16751.0], [97.4, 16799.0], [97.5, 16799.0], [97.6, 16799.0], [97.7, 17141.0], [97.8, 17141.0], [97.9, 17141.0], [98.0, 17246.0], [98.1, 17246.0], [98.2, 17246.0], [98.3, 17246.0], [98.4, 17832.0], [98.5, 17832.0], [98.6, 17832.0], [98.7, 18010.0], [98.8, 18010.0], [98.9, 18010.0], [99.0, 18521.0], [99.1, 18521.0], [99.2, 18521.0], [99.3, 18521.0], [99.4, 18996.0], [99.5, 18996.0], [99.6, 18996.0], [99.7, 20925.0], [99.8, 20925.0], [99.9, 20925.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[0.0, 10779.0], [0.1, 10779.0], [0.2, 10779.0], [0.3, 10779.0], [0.4, 10800.0], [0.5, 10800.0], [0.6, 10800.0], [0.7, 10825.0], [0.8, 10825.0], [0.9, 10825.0], [1.0, 10842.0], [1.1, 10842.0], [1.2, 10842.0], [1.3, 10842.0], [1.4, 10855.0], [1.5, 10855.0], [1.6, 10855.0], [1.7, 10865.0], [1.8, 10865.0], [1.9, 10865.0], [2.0, 10865.0], [2.1, 10865.0], [2.2, 10865.0], [2.3, 10865.0], [2.4, 10866.0], [2.5, 10866.0], [2.6, 10866.0], [2.7, 10910.0], [2.8, 10910.0], [2.9, 10910.0], [3.0, 10925.0], [3.1, 10925.0], [3.2, 10925.0], [3.3, 10925.0], [3.4, 10930.0], [3.5, 10930.0], [3.6, 10930.0], [3.7, 11181.0], [3.8, 11181.0], [3.9, 11181.0], [4.0, 11576.0], [4.1, 11576.0], [4.2, 11576.0], [4.3, 11576.0], [4.4, 29463.0], [4.5, 29463.0], [4.6, 29463.0], [4.7, 35495.0], [4.8, 35495.0], [4.9, 35495.0], [5.0, 77879.0], [5.1, 77879.0], [5.2, 77879.0], [5.3, 77879.0], [5.4, 120452.0], [5.5, 120452.0], [5.6, 120452.0], [5.7, 139498.0], [5.8, 139498.0], [5.9, 139498.0], [6.0, 142530.0], [6.1, 142530.0], [6.2, 142530.0], [6.3, 142530.0], [6.4, 151665.0], [6.5, 151665.0], [6.6, 151665.0], [6.7, 157704.0], [6.8, 157704.0], [6.9, 157704.0], [7.0, 161014.0], [7.1, 161014.0], [7.2, 161014.0], [7.3, 161014.0], [7.4, 163939.0], [7.5, 163939.0], [7.6, 163939.0], [7.7, 167164.0], [7.8, 167164.0], [7.9, 167164.0], [8.0, 170099.0], [8.1, 170099.0], [8.2, 170099.0], [8.3, 170099.0], [8.4, 173209.0], [8.5, 173209.0], [8.6, 173209.0], [8.7, 176112.0], [8.8, 176112.0], [8.9, 176112.0], [9.0, 179204.0], [9.1, 179204.0], [9.2, 179204.0], [9.3, 179204.0], [9.4, 182168.0], [9.5, 182168.0], [9.6, 182168.0], [9.7, 185138.0], [9.8, 185138.0], [9.9, 185138.0], [10.0, 188204.0], [10.1, 188204.0], [10.2, 188204.0], [10.3, 188204.0], [10.4, 191161.0], [10.5, 191161.0], [10.6, 191161.0], [10.7, 194242.0], [10.8, 194242.0], [10.9, 194242.0], [11.0, 194242.0], [11.1, 200158.0], [11.2, 200158.0], [11.3, 200158.0], [11.4, 203231.0], [11.5, 203231.0], [11.6, 203231.0], [11.7, 206181.0], [11.8, 206181.0], [11.9, 206181.0], [12.0, 206181.0], [12.1, 209238.0], [12.2, 209238.0], [12.3, 209238.0], [12.4, 212268.0], [12.5, 212268.0], [12.6, 212268.0], [12.7, 218363.0], [12.8, 218363.0], [12.9, 218363.0], [13.0, 218363.0], [13.1, 221284.0], [13.2, 221284.0], [13.3, 221284.0], [13.4, 227361.0], [13.5, 227361.0], [13.6, 227361.0], [13.7, 236464.0], [13.8, 236464.0], [13.9, 236464.0], [14.0, 236464.0], [14.1, 239379.0], [14.2, 239379.0], [14.3, 239379.0], [14.4, 242472.0], [14.5, 242472.0], [14.6, 242472.0], [14.7, 248556.0], [14.8, 248556.0], [14.9, 248556.0], [15.0, 248556.0], [15.1, 254489.0], [15.2, 254489.0], [15.3, 254489.0], [15.4, 255569.0], [15.5, 255569.0], [15.6, 255569.0], [15.7, 260562.0], [15.8, 260562.0], [15.9, 260562.0], [16.0, 260562.0], [16.1, 266452.0], [16.2, 266452.0], [16.3, 266452.0], [16.4, 281606.0], [16.5, 281606.0], [16.6, 281606.0], [16.7, 284633.0], [16.8, 284633.0], [16.9, 284633.0], [17.0, 284633.0], [17.1, 290694.0], [17.2, 290694.0], [17.3, 290694.0], [17.4, 291862.0], [17.5, 291862.0], [17.6, 291862.0], [17.7, 293556.0], [17.8, 293556.0], [17.9, 293556.0], [18.0, 293556.0], [18.1, 300007.0], [18.2, 300007.0], [18.3, 300007.0], [18.4, 300012.0], [18.5, 300012.0], [18.6, 300012.0], [18.7, 300013.0], [18.8, 300013.0], [18.9, 300013.0], [19.0, 300014.0], [19.1, 300014.0], [19.2, 300014.0], [19.3, 300014.0], [19.4, 300017.0], [19.5, 300017.0], [19.6, 300017.0], [19.7, 300017.0], [19.8, 300017.0], [19.9, 300017.0], [20.0, 300017.0], [20.1, 300017.0], [20.2, 300017.0], [20.3, 300017.0], [20.4, 300018.0], [20.5, 300018.0], [20.6, 300018.0], [20.7, 300020.0], [20.8, 300020.0], [20.9, 300020.0], [21.0, 300022.0], [21.1, 300022.0], [21.2, 300022.0], [21.3, 300022.0], [21.4, 300022.0], [21.5, 300022.0], [21.6, 300022.0], [21.7, 300022.0], [21.8, 300022.0], [21.9, 300022.0], [22.0, 300023.0], [22.1, 300023.0], [22.2, 300023.0], [22.3, 300023.0], [22.4, 300023.0], [22.5, 300023.0], [22.6, 300023.0], [22.7, 300023.0], [22.8, 300023.0], [22.9, 300023.0], [23.0, 300024.0], [23.1, 300024.0], [23.2, 300024.0], [23.3, 300024.0], [23.4, 300025.0], [23.5, 300025.0], [23.6, 300025.0], [23.7, 300025.0], [23.8, 300025.0], [23.9, 300025.0], [24.0, 300025.0], [24.1, 300025.0], [24.2, 300025.0], [24.3, 300025.0], [24.4, 300025.0], [24.5, 300025.0], [24.6, 300025.0], [24.7, 300026.0], [24.8, 300026.0], [24.9, 300026.0], [25.0, 300027.0], [25.1, 300027.0], [25.2, 300027.0], [25.3, 300027.0], [25.4, 300027.0], [25.5, 300027.0], [25.6, 300027.0], [25.7, 300027.0], [25.8, 300027.0], [25.9, 300027.0], [26.0, 300027.0], [26.1, 300027.0], [26.2, 300027.0], [26.3, 300027.0], [26.4, 300028.0], [26.5, 300028.0], [26.6, 300028.0], [26.7, 300031.0], [26.8, 300031.0], [26.9, 300031.0], [27.0, 300035.0], [27.1, 300035.0], [27.2, 300035.0], [27.3, 300035.0], [27.4, 300039.0], [27.5, 300039.0], [27.6, 300039.0], [27.7, 300041.0], [27.8, 300041.0], [27.9, 300041.0], [28.0, 300044.0], [28.1, 300044.0], [28.2, 300044.0], [28.3, 300044.0], [28.4, 300044.0], [28.5, 300044.0], [28.6, 300044.0], [28.7, 300046.0], [28.8, 300046.0], [28.9, 300046.0], [29.0, 300047.0], [29.1, 300047.0], [29.2, 300047.0], [29.3, 300047.0], [29.4, 300048.0], [29.5, 300048.0], [29.6, 300048.0], [29.7, 300049.0], [29.8, 300049.0], [29.9, 300049.0], [30.0, 300049.0], [30.1, 300049.0], [30.2, 300049.0], [30.3, 300049.0], [30.4, 300050.0], [30.5, 300050.0], [30.6, 300050.0], [30.7, 300053.0], [30.8, 300053.0], [30.9, 300053.0], [31.0, 300055.0], [31.1, 300055.0], [31.2, 300055.0], [31.3, 300055.0], [31.4, 300081.0], [31.5, 300081.0], [31.6, 300081.0], [31.7, 300094.0], [31.8, 300094.0], [31.9, 300094.0], [32.0, 300109.0], [32.1, 300109.0], [32.2, 300109.0], [32.3, 300109.0], [32.4, 300113.0], [32.5, 300113.0], [32.6, 300113.0], [32.7, 300121.0], [32.8, 300121.0], [32.9, 300121.0], [33.0, 300186.0], [33.1, 300186.0], [33.2, 300186.0], [33.3, 300186.0], [33.4, 300350.0], [33.5, 300350.0], [33.6, 300350.0], [33.7, 301603.0], [33.8, 301603.0], [33.9, 301603.0], [34.0, 305872.0], [34.1, 305872.0], [34.2, 305872.0], [34.3, 305872.0], [34.4, 306230.0], [34.5, 306230.0], [34.6, 306230.0], [34.7, 306265.0], [34.8, 306265.0], [34.9, 306265.0], [35.0, 306302.0], [35.1, 306302.0], [35.2, 306302.0], [35.3, 306302.0], [35.4, 306325.0], [35.5, 306325.0], [35.6, 306325.0], [35.7, 306359.0], [35.8, 306359.0], [35.9, 306359.0], [36.0, 306359.0], [36.1, 306360.0], [36.2, 306360.0], [36.3, 306360.0], [36.4, 306472.0], [36.5, 306472.0], [36.6, 306472.0], [36.7, 306474.0], [36.8, 306474.0], [36.9, 306474.0], [37.0, 306474.0], [37.1, 306505.0], [37.2, 306505.0], [37.3, 306505.0], [37.4, 306509.0], [37.5, 306509.0], [37.6, 306509.0], [37.7, 306529.0], [37.8, 306529.0], [37.9, 306529.0], [38.0, 306529.0], [38.1, 306556.0], [38.2, 306556.0], [38.3, 306556.0], [38.4, 306568.0], [38.5, 306568.0], [38.6, 306568.0], [38.7, 306575.0], [38.8, 306575.0], [38.9, 306575.0], [39.0, 306575.0], [39.1, 306590.0], [39.2, 306590.0], [39.3, 306590.0], [39.4, 306718.0], [39.5, 306718.0], [39.6, 306718.0], [39.7, 308454.0], [39.8, 308454.0], [39.9, 308454.0], [40.0, 308454.0], [40.1, 308798.0], [40.2, 308798.0], [40.3, 308798.0], [40.4, 316576.0], [40.5, 316576.0], [40.6, 316576.0], [40.7, 317862.0], [40.8, 317862.0], [40.9, 317862.0], [41.0, 317862.0], [41.1, 318217.0], [41.2, 318217.0], [41.3, 318217.0], [41.4, 320848.0], [41.5, 320848.0], [41.6, 320848.0], [41.7, 323864.0], [41.8, 323864.0], [41.9, 323864.0], [42.0, 323864.0], [42.1, 326570.0], [42.2, 326570.0], [42.3, 326570.0], [42.4, 332812.0], [42.5, 332812.0], [42.6, 332812.0], [42.7, 338583.0], [42.8, 338583.0], [42.9, 338583.0], [43.0, 338583.0], [43.1, 338916.0], [43.2, 338916.0], [43.3, 338916.0], [43.4, 342805.0], [43.5, 342805.0], [43.6, 342805.0], [43.7, 344931.0], [43.8, 344931.0], [43.9, 344931.0], [44.0, 344931.0], [44.1, 346709.0], [44.2, 346709.0], [44.3, 346709.0], [44.4, 350991.0], [44.5, 350991.0], [44.6, 350991.0], [44.7, 353946.0], [44.8, 353946.0], [44.9, 353946.0], [45.0, 353946.0], [45.1, 354566.0], [45.2, 354566.0], [45.3, 354566.0], [45.4, 356533.0], [45.5, 356533.0], [45.6, 356533.0], [45.7, 357007.0], [45.8, 357007.0], [45.9, 357007.0], [46.0, 357007.0], [46.1, 357421.0], [46.2, 357421.0], [46.3, 357421.0], [46.4, 357701.0], [46.5, 357701.0], [46.6, 357701.0], [46.7, 360496.0], [46.8, 360496.0], [46.9, 360496.0], [47.0, 360496.0], [47.1, 360619.0], [47.2, 360619.0], [47.3, 360619.0], [47.4, 362663.0], [47.5, 362663.0], [47.6, 362663.0], [47.7, 362747.0], [47.8, 362747.0], [47.9, 362747.0], [48.0, 362747.0], [48.1, 362972.0], [48.2, 362972.0], [48.3, 362972.0], [48.4, 363387.0], [48.5, 363387.0], [48.6, 363387.0], [48.7, 363831.0], [48.8, 363831.0], [48.9, 363831.0], [49.0, 363831.0], [49.1, 364302.0], [49.2, 364302.0], [49.3, 364302.0], [49.4, 364623.0], [49.5, 364623.0], [49.6, 364623.0], [49.7, 364903.0], [49.8, 364903.0], [49.9, 364903.0], [50.0, 364903.0], [50.1, 365614.0], [50.2, 365614.0], [50.3, 365614.0], [50.4, 366739.0], [50.5, 366739.0], [50.6, 366739.0], [50.7, 368777.0], [50.8, 368777.0], [50.9, 368777.0], [51.0, 368777.0], [51.1, 368996.0], [51.2, 368996.0], [51.3, 368996.0], [51.4, 369345.0], [51.5, 369345.0], [51.6, 369345.0], [51.7, 371665.0], [51.8, 371665.0], [51.9, 371665.0], [52.0, 371665.0], [52.1, 372670.0], [52.2, 372670.0], [52.3, 372670.0], [52.4, 373418.0], [52.5, 373418.0], [52.6, 373418.0], [52.7, 374465.0], [52.8, 374465.0], [52.9, 374465.0], [53.0, 374465.0], [53.1, 374752.0], [53.2, 374752.0], [53.3, 374752.0], [53.4, 375729.0], [53.5, 375729.0], [53.6, 375729.0], [53.7, 378956.0], [53.8, 378956.0], [53.9, 378956.0], [54.0, 378956.0], [54.1, 382351.0], [54.2, 382351.0], [54.3, 382351.0], [54.4, 382657.0], [54.5, 382657.0], [54.6, 382657.0], [54.7, 384935.0], [54.8, 384935.0], [54.9, 384935.0], [55.0, 384935.0], [55.1, 388593.0], [55.2, 388593.0], [55.3, 388593.0], [55.4, 388714.0], [55.5, 388714.0], [55.6, 388714.0], [55.7, 390756.0], [55.8, 390756.0], [55.9, 390756.0], [56.0, 390756.0], [56.1, 390929.0], [56.2, 390929.0], [56.3, 390929.0], [56.4, 391342.0], [56.5, 391342.0], [56.6, 391342.0], [56.7, 391539.0], [56.8, 391539.0], [56.9, 391539.0], [57.0, 391539.0], [57.1, 391744.0], [57.2, 391744.0], [57.3, 391744.0], [57.4, 391800.0], [57.5, 391800.0], [57.6, 391800.0], [57.7, 391927.0], [57.8, 391927.0], [57.9, 391927.0], [58.0, 391927.0], [58.1, 392165.0], [58.2, 392165.0], [58.3, 392165.0], [58.4, 392287.0], [58.5, 392287.0], [58.6, 392287.0], [58.7, 394352.0], [58.8, 394352.0], [58.9, 394352.0], [59.0, 394352.0], [59.1, 394661.0], [59.2, 394661.0], [59.3, 394661.0], [59.4, 394765.0], [59.5, 394765.0], [59.6, 394765.0], [59.7, 395921.0], [59.8, 395921.0], [59.9, 395921.0], [60.0, 395921.0], [60.1, 396410.0], [60.2, 396410.0], [60.3, 396410.0], [60.4, 396861.0], [60.5, 396861.0], [60.6, 396861.0], [60.7, 397669.0], [60.8, 397669.0], [60.9, 397669.0], [61.0, 397669.0], [61.1, 397799.0], [61.2, 397799.0], [61.3, 397799.0], [61.4, 397935.0], [61.5, 397935.0], [61.6, 397935.0], [61.7, 397935.0], [61.8, 397935.0], [61.9, 397935.0], [62.0, 397935.0], [62.1, 399869.0], [62.2, 399869.0], [62.3, 399869.0], [62.4, 400842.0], [62.5, 400842.0], [62.6, 400842.0], [62.7, 402536.0], [62.8, 402536.0], [62.9, 402536.0], [63.0, 402536.0], [63.1, 402722.0], [63.2, 402722.0], [63.3, 402722.0], [63.4, 403002.0], [63.5, 403002.0], [63.6, 403002.0], [63.7, 403157.0], [63.8, 403157.0], [63.9, 403157.0], [64.0, 403157.0], [64.1, 403830.0], [64.2, 403830.0], [64.3, 403830.0], [64.4, 403967.0], [64.5, 403967.0], [64.6, 403967.0], [64.7, 404779.0], [64.8, 404779.0], [64.9, 404779.0], [65.0, 404779.0], [65.1, 405196.0], [65.2, 405196.0], [65.3, 405196.0], [65.4, 405830.0], [65.5, 405830.0], [65.6, 405830.0], [65.7, 409803.0], [65.8, 409803.0], [65.9, 409803.0], [66.0, 409803.0], [66.1, 411899.0], [66.2, 411899.0], [66.3, 411899.0], [66.4, 417847.0], [66.5, 417847.0], [66.6, 417847.0], [66.7, 422316.0], [66.8, 422316.0], [66.9, 422316.0], [67.0, 422316.0], [67.1, 438022.0], [67.2, 438022.0], [67.3, 438022.0], [67.4, 440781.0], [67.5, 440781.0], [67.6, 440781.0], [67.7, 443713.0], [67.8, 443713.0], [67.9, 443713.0], [68.0, 443713.0], [68.1, 446782.0], [68.2, 446782.0], [68.3, 446782.0], [68.4, 447974.0], [68.5, 447974.0], [68.6, 447974.0], [68.7, 450812.0], [68.8, 450812.0], [68.9, 450812.0], [69.0, 450812.0], [69.1, 451339.0], [69.2, 451339.0], [69.3, 451339.0], [69.4, 451921.0], [69.5, 451921.0], [69.6, 451921.0], [69.7, 452641.0], [69.8, 452641.0], [69.9, 452641.0], [70.0, 452641.0], [70.1, 452869.0], [70.2, 452869.0], [70.3, 452869.0], [70.4, 453302.0], [70.5, 453302.0], [70.6, 453302.0], [70.7, 454235.0], [70.8, 454235.0], [70.9, 454235.0], [71.0, 454235.0], [71.1, 455605.0], [71.2, 455605.0], [71.3, 455605.0], [71.4, 455774.0], [71.5, 455774.0], [71.6, 455774.0], [71.7, 457411.0], [71.8, 457411.0], [71.9, 457411.0], [72.0, 457411.0], [72.1, 457842.0], [72.2, 457842.0], [72.3, 457842.0], [72.4, 458876.0], [72.5, 458876.0], [72.6, 458876.0], [72.7, 461195.0], [72.8, 461195.0], [72.9, 461195.0], [73.0, 461195.0], [73.1, 461248.0], [73.2, 461248.0], [73.3, 461248.0], [73.4, 461549.0], [73.5, 461549.0], [73.6, 461549.0], [73.7, 461815.0], [73.8, 461815.0], [73.9, 461815.0], [74.0, 461815.0], [74.1, 463304.0], [74.2, 463304.0], [74.3, 463304.0], [74.4, 465005.0], [74.5, 465005.0], [74.6, 465005.0], [74.7, 468970.0], [74.8, 468970.0], [74.9, 468970.0], [75.0, 468970.0], [75.1, 470112.0], [75.2, 470112.0], [75.3, 470112.0], [75.4, 470812.0], [75.5, 470812.0], [75.6, 470812.0], [75.7, 472631.0], [75.8, 472631.0], [75.9, 472631.0], [76.0, 472631.0], [76.1, 473739.0], [76.2, 473739.0], [76.3, 473739.0], [76.4, 473825.0], [76.5, 473825.0], [76.6, 473825.0], [76.7, 475137.0], [76.8, 475137.0], [76.9, 475137.0], [77.0, 475137.0], [77.1, 475847.0], [77.2, 475847.0], [77.3, 475847.0], [77.4, 475859.0], [77.5, 475859.0], [77.6, 475859.0], [77.7, 476003.0], [77.8, 476003.0], [77.9, 476003.0], [78.0, 476060.0], [78.1, 476060.0], [78.2, 476060.0], [78.3, 476060.0], [78.4, 478936.0], [78.5, 478936.0], [78.6, 478936.0], [78.7, 480824.0], [78.8, 480824.0], [78.9, 480824.0], [79.0, 481359.0], [79.1, 481359.0], [79.2, 481359.0], [79.3, 481359.0], [79.4, 481400.0], [79.5, 481400.0], [79.6, 481400.0], [79.7, 481529.0], [79.8, 481529.0], [79.9, 481529.0], [80.0, 481934.0], [80.1, 481934.0], [80.2, 481934.0], [80.3, 481934.0], [80.4, 481984.0], [80.5, 481984.0], [80.6, 481984.0], [80.7, 485004.0], [80.8, 485004.0], [80.9, 485004.0], [81.0, 485499.0], [81.1, 485499.0], [81.2, 485499.0], [81.3, 485499.0], [81.4, 488107.0], [81.5, 488107.0], [81.6, 488107.0], [81.7, 489617.0], [81.8, 489617.0], [81.9, 489617.0], [82.0, 490348.0], [82.1, 490348.0], [82.2, 490348.0], [82.3, 490348.0], [82.4, 490486.0], [82.5, 490486.0], [82.6, 490486.0], [82.7, 491596.0], [82.8, 491596.0], [82.9, 491596.0], [83.0, 493939.0], [83.1, 493939.0], [83.2, 493939.0], [83.3, 493939.0], [83.4, 494007.0], [83.5, 494007.0], [83.6, 494007.0], [83.7, 494028.0], [83.8, 494028.0], [83.9, 494028.0], [84.0, 494251.0], [84.1, 494251.0], [84.2, 494251.0], [84.3, 494251.0], [84.4, 497314.0], [84.5, 497314.0], [84.6, 497314.0], [84.7, 501004.0], [84.8, 501004.0], [84.9, 501004.0], [85.0, 506855.0], [85.1, 506855.0], [85.2, 506855.0], [85.3, 506855.0], [85.4, 506928.0], [85.5, 506928.0], [85.6, 506928.0], [85.7, 507109.0], [85.8, 507109.0], [85.9, 507109.0], [86.0, 515617.0], [86.1, 515617.0], [86.2, 515617.0], [86.3, 515617.0], [86.4, 515865.0], [86.5, 515865.0], [86.6, 515865.0], [86.7, 521174.0], [86.8, 521174.0], [86.9, 521174.0], [87.0, 521632.0], [87.1, 521632.0], [87.2, 521632.0], [87.3, 521632.0], [87.4, 532697.0], [87.5, 532697.0], [87.6, 532697.0], [87.7, 536424.0], [87.8, 536424.0], [87.9, 536424.0], [88.0, 536462.0], [88.1, 536462.0], [88.2, 536462.0], [88.3, 536462.0], [88.4, 539245.0], [88.5, 539245.0], [88.6, 539245.0], [88.7, 541685.0], [88.8, 541685.0], [88.9, 541685.0], [89.0, 544525.0], [89.1, 544525.0], [89.2, 544525.0], [89.3, 544525.0], [89.4, 547776.0], [89.5, 547776.0], [89.6, 547776.0], [89.7, 550023.0], [89.8, 550023.0], [89.9, 550023.0], [90.0, 551051.0], [90.1, 551051.0], [90.2, 551051.0], [90.3, 551051.0], [90.4, 551989.0], [90.5, 551989.0], [90.6, 551989.0], [90.7, 554138.0], [90.8, 554138.0], [90.9, 554138.0], [91.0, 556467.0], [91.1, 556467.0], [91.2, 556467.0], [91.3, 556467.0], [91.4, 557062.0], [91.5, 557062.0], [91.6, 557062.0], [91.7, 559678.0], [91.8, 559678.0], [91.9, 559678.0], [92.0, 560498.0], [92.1, 560498.0], [92.2, 560498.0], [92.3, 560498.0], [92.4, 565651.0], [92.5, 565651.0], [92.6, 565651.0], [92.7, 571065.0], [92.8, 571065.0], [92.9, 571065.0], [93.0, 572516.0], [93.1, 572516.0], [93.2, 572516.0], [93.3, 572516.0], [93.4, 576983.0], [93.5, 576983.0], [93.6, 576983.0], [93.7, 585288.0], [93.8, 585288.0], [93.9, 585288.0], [94.0, 587935.0], [94.1, 587935.0], [94.2, 587935.0], [94.3, 587935.0], [94.4, 593206.0], [94.5, 593206.0], [94.6, 593206.0], [94.7, 617439.0], [94.8, 617439.0], [94.9, 617439.0], [95.0, 620252.0], [95.1, 620252.0], [95.2, 620252.0], [95.3, 620252.0], [95.4, 624023.0], [95.5, 624023.0], [95.6, 624023.0], [95.7, 638563.0], [95.8, 638563.0], [95.9, 638563.0], [96.0, 647443.0], [96.1, 647443.0], [96.2, 647443.0], [96.3, 647443.0], [96.4, 650456.0], [96.5, 650456.0], [96.6, 650456.0], [96.7, 656037.0], [96.8, 656037.0], [96.9, 656037.0], [97.0, 656423.0], [97.1, 656423.0], [97.2, 656423.0], [97.3, 656423.0], [97.4, 665227.0], [97.5, 665227.0], [97.6, 665227.0], [97.7, 689968.0], [97.8, 689968.0], [97.9, 689968.0], [98.0, 713766.0], [98.1, 713766.0], [98.2, 713766.0], [98.3, 713766.0], [98.4, 713946.0], [98.5, 713946.0], [98.6, 713946.0], [98.7, 758625.0], [98.8, 758625.0], [98.9, 758625.0], [99.0, 783249.0], [99.1, 783249.0], [99.2, 783249.0], [99.3, 783249.0], [99.4, 788696.0], [99.5, 788696.0], [99.6, 788696.0], [99.7, 839964.0], [99.8, 839964.0], [99.9, 839964.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 42.0, "series": [{"data": [[600.0, 11.0], [700.0, 8.0], [800.0, 9.0], [900.0, 7.0], [1000.0, 13.0], [1100.0, 7.0], [1200.0, 2.0], [1300.0, 5.0], [1400.0, 5.0], [1500.0, 6.0], [1600.0, 5.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 4.0], [2300.0, 1.0], [2200.0, 3.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 3.0], [2800.0, 1.0], [3400.0, 1.0], [3600.0, 1.0], [3900.0, 2.0], [4300.0, 2.0], [4600.0, 3.0], [5300.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6400.0, 1.0], [6800.0, 1.0], [6900.0, 2.0], [7100.0, 1.0], [7000.0, 1.0], [7200.0, 1.0], [7400.0, 1.0], [7800.0, 1.0], [8400.0, 4.0], [8600.0, 2.0], [8300.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9700.0, 3.0], [9600.0, 2.0], [9400.0, 2.0], [9500.0, 1.0], [9800.0, 1.0], [9900.0, 2.0], [10200.0, 1.0], [10800.0, 2.0], [11200.0, 2.0], [11000.0, 1.0], [10900.0, 1.0], [11500.0, 2.0], [11400.0, 1.0], [11300.0, 1.0], [12100.0, 3.0], [11800.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [13200.0, 3.0], [13000.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [13500.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [14300.0, 1.0], [14100.0, 3.0], [14200.0, 1.0], [14400.0, 2.0], [15000.0, 1.0], [17200.0, 1.0], [16700.0, 3.0], [16500.0, 1.0], [17100.0, 1.0], [17800.0, 1.0], [18000.0, 1.0], [18900.0, 1.0], [18500.0, 1.0], [20900.0, 1.0], [100.0, 5.0], [200.0, 23.0], [300.0, 24.0], [400.0, 25.0], [500.0, 29.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[306500.0, 7.0], [300100.0, 4.0], [338500.0, 1.0], [344900.0, 1.0], [354500.0, 1.0], [357700.0, 1.0], [402500.0, 1.0], [463300.0, 1.0], [242400.0, 1.0], [452800.0, 1.0], [142500.0, 1.0], [624000.0, 1.0], [656000.0, 1.0], [176100.0, 1.0], [346700.0, 1.0], [362700.0, 1.0], [391500.0, 1.0], [200100.0, 1.0], [397900.0, 2.0], [394700.0, 1.0], [576900.0, 1.0], [227300.0, 1.0], [493900.0, 1.0], [409800.0, 1.0], [457800.0, 1.0], [473800.0, 1.0], [161000.0, 1.0], [316500.0, 1.0], [338900.0, 1.0], [188200.0, 1.0], [212200.0, 1.0], [470100.0, 1.0], [617400.0, 1.0], [360400.0, 1.0], [541600.0, 1.0], [308700.0, 1.0], [650400.0, 1.0], [391900.0, 1.0], [382300.0, 1.0], [388700.0, 1.0], [404700.0, 1.0], [475100.0, 1.0], [481500.0, 1.0], [507100.0, 1.0], [291800.0, 1.0], [77800.0, 1.0], [620200.0, 1.0], [323800.0, 1.0], [403800.0, 1.0], [713900.0, 1.0], [515800.0, 1.0], [151600.0, 1.0], [326500.0, 1.0], [364900.0, 1.0], [209200.0, 1.0], [451300.0, 1.0], [236400.0, 1.0], [473700.0, 1.0], [839900.0, 1.0], [306400.0, 2.0], [300000.0, 42.0], [551900.0, 1.0], [476000.0, 2.0], [353900.0, 1.0], [366700.0, 1.0], [405100.0, 1.0], [446700.0, 1.0], [481900.0, 2.0], [491500.0, 1.0], [248500.0, 1.0], [557000.0, 1.0], [317800.0, 1.0], [362600.0, 1.0], [394600.0, 1.0], [465000.0, 1.0], [461800.0, 1.0], [585200.0, 1.0], [559600.0, 1.0], [10700.0, 1.0], [10800.0, 7.0], [10900.0, 3.0], [11100.0, 1.0], [11500.0, 1.0], [390900.0, 1.0], [544500.0, 1.0], [396400.0, 1.0], [438000.0, 1.0], [450800.0, 1.0], [29400.0, 1.0], [293500.0, 1.0], [306300.0, 4.0], [163900.0, 1.0], [167100.0, 1.0], [191100.0, 1.0], [395900.0, 1.0], [218300.0, 1.0], [440700.0, 1.0], [713700.0, 1.0], [318200.0, 1.0], [647400.0, 1.0], [372600.0, 1.0], [391800.0, 1.0], [452600.0, 1.0], [481400.0, 1.0], [689900.0, 1.0], [494200.0, 1.0], [560400.0, 1.0], [656400.0, 1.0], [179200.0, 1.0], [368900.0, 1.0], [384900.0, 1.0], [391300.0, 1.0], [203200.0, 1.0], [397700.0, 1.0], [254400.0, 1.0], [281600.0, 1.0], [332800.0, 1.0], [374400.0, 1.0], [396800.0, 1.0], [489600.0, 1.0], [521600.0, 1.0], [306700.0, 1.0], [300300.0, 1.0], [157700.0, 1.0], [364300.0, 1.0], [402700.0, 1.0], [239300.0, 1.0], [521100.0, 1.0], [305800.0, 1.0], [357000.0, 1.0], [392200.0, 1.0], [382600.0, 1.0], [417800.0, 1.0], [485000.0, 1.0], [501000.0, 1.0], [139400.0, 1.0], [593200.0, 1.0], [356500.0, 1.0], [362900.0, 1.0], [375700.0, 1.0], [369300.0, 1.0], [378900.0, 1.0], [388500.0, 1.0], [391700.0, 1.0], [455700.0, 1.0], [481300.0, 1.0], [497300.0, 1.0], [506900.0, 1.0], [342800.0, 1.0], [371600.0, 1.0], [461200.0, 1.0], [470800.0, 1.0], [515600.0, 1.0], [185100.0, 1.0], [403100.0, 1.0], [422300.0, 1.0], [447900.0, 1.0], [638500.0, 1.0], [255500.0, 1.0], [306200.0, 2.0], [357400.0, 1.0], [360600.0, 1.0], [363800.0, 1.0], [373400.0, 1.0], [411800.0, 1.0], [472600.0, 1.0], [475800.0, 2.0], [485400.0, 1.0], [536400.0, 2.0], [170000.0, 1.0], [173200.0, 1.0], [363300.0, 1.0], [392100.0, 1.0], [572500.0, 1.0], [221200.0, 1.0], [468900.0, 1.0], [488100.0, 1.0], [266400.0, 1.0], [551000.0, 1.0], [301600.0, 1.0], [320800.0, 1.0], [365600.0, 1.0], [400800.0, 1.0], [397600.0, 1.0], [490400.0, 1.0], [480800.0, 1.0], [539200.0, 1.0], [182100.0, 1.0], [374700.0, 1.0], [390700.0, 1.0], [206100.0, 1.0], [461100.0, 1.0], [260500.0, 1.0], [290600.0, 1.0], [758600.0, 1.0], [405800.0, 1.0], [550000.0, 1.0], [556400.0, 1.0], [665200.0, 1.0], [350900.0, 1.0], [194200.0, 1.0], [554100.0, 1.0], [547700.0, 1.0], [443700.0, 1.0], [453300.0, 1.0], [478900.0, 1.0], [532600.0, 1.0], [571000.0, 1.0], [308400.0, 1.0], [788600.0, 1.0], [587900.0, 1.0], [455600.0, 1.0], [458800.0, 1.0], [494000.0, 2.0], [506800.0, 1.0], [35400.0, 1.0], [565600.0, 1.0], [368700.0, 1.0], [783200.0, 1.0], [403900.0, 1.0], [394300.0, 1.0], [451900.0, 1.0], [461500.0, 1.0], [490300.0, 1.0], [284600.0, 1.0], [364600.0, 1.0], [399800.0, 1.0], [403000.0, 1.0], [457400.0, 1.0], [454200.0, 1.0], [120400.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 839900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 77.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 300.0, "series": [{"data": [[0.0, 77.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 96.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 127.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 300.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.076923076923076, "minX": 1.73454408E12, "maxY": 100.0, "series": [{"data": [[1.7345442E12, 100.0], [1.7345445E12, 100.0], [1.7345448E12, 88.73913043478261], [1.73454462E12, 100.0], [1.73454492E12, 87.78571428571429], [1.73454522E12, 53.45454545454545], [1.73454552E12, 7.076923076923076], [1.73454438E12, 100.0], [1.73454468E12, 98.18367346938776], [1.73454498E12, 84.77272727272727], [1.73454528E12, 46.0], [1.7345451E12, 67.3529411764706], [1.7345454E12, 25.5], [1.73454408E12, 91.71428571428571], [1.73454486E12, 88.0], [1.73454516E12, 60.77777777777777], [1.73454546E12, 17.285714285714285], [1.73454426E12, 100.0], [1.73454456E12, 100.0], [1.73454534E12, 36.0], [1.73454432E12, 100.0], [1.73454414E12, 100.0], [1.73454444E12, 100.0], [1.73454474E12, 89.0], [1.73454504E12, 75.57894736842103]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73454552E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 283.5, "minX": 1.0, "maxY": 839964.0, "series": [{"data": [[38.0, 2659.0], [40.0, 1331.0], [43.0, 2055.0], [53.0, 3090.2], [52.0, 584.0], [55.0, 4308.0], [60.0, 514.0], [67.0, 778.0], [66.0, 618.6666666666666], [71.0, 5066.5], [69.0, 464.0], [75.0, 516.0], [74.0, 283.5], [78.0, 5247.2], [77.0, 1356.0], [76.0, 587.0], [80.0, 620.0], [87.0, 859.0], [86.0, 452.99999999999994], [89.0, 608.1363636363637], [88.0, 636.111111111111], [92.0, 4673.0], [93.0, 327.0], [99.0, 7311.0], [100.0, 4780.64150943396], [16.0, 900.0], [24.0, 1401.0], [27.0, 1476.0], [28.0, 1644.5]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[93.11666666666669, 3825.8999999999974]], "isOverall": false, "label": "OS Process Sampler-Aggregated", "isController": false}, {"data": [[2.0, 291862.0], [3.0, 394765.0], [4.0, 342805.0], [5.0, 446782.0], [6.0, 461549.0], [7.0, 587935.0], [8.0, 491596.0], [9.0, 689968.0], [11.0, 575363.0], [12.0, 255569.0], [13.0, 839964.0], [14.0, 515617.0], [15.0, 515865.0], [16.0, 364302.0], [18.0, 543682.0], [20.0, 506368.5], [21.0, 316576.0], [22.0, 647443.0], [23.0, 656037.0], [24.0, 346709.0], [25.0, 494028.0], [26.0, 788696.0], [27.0, 364623.0], [28.0, 656423.0], [29.0, 556467.0], [30.0, 363831.0], [31.0, 382657.0], [33.0, 397935.0], [32.0, 475859.0], [35.0, 391800.0], [34.0, 470112.0], [37.0, 394352.0], [36.0, 472631.0], [39.0, 481400.0], [38.0, 409803.0], [41.0, 476060.0], [40.0, 475137.0], [43.0, 480824.0], [42.0, 403830.0], [45.0, 397799.0], [44.0, 397935.0], [47.0, 576983.0], [46.0, 488107.0], [49.0, 493939.0], [48.0, 571065.0], [51.0, 544525.0], [50.0, 403967.0], [53.0, 564524.5], [52.0, 517968.0], [55.0, 489617.0], [54.0, 490348.0], [57.0, 551051.0], [56.0, 397669.0], [59.0, 468970.0], [58.0, 394661.0], [61.0, 300022.0], [60.0, 647524.5], [63.0, 536462.0], [62.0, 400842.0], [67.0, 418279.0], [66.0, 451311.6666666667], [65.0, 402722.0], [64.0, 532697.0], [71.0, 301603.0], [70.0, 300350.0], [69.0, 505918.5], [68.0, 454235.0], [75.0, 407099.5], [74.0, 483338.6666666667], [73.0, 362747.0], [72.0, 447974.0], [79.0, 453302.0], [78.0, 300020.0], [77.0, 490435.5], [76.0, 457381.5], [83.0, 300027.0], [82.0, 300012.0], [81.0, 300025.0], [80.0, 421215.0], [87.0, 361955.5], [86.0, 483060.5], [85.0, 300049.0], [84.0, 300027.0], [91.0, 300025.0], [90.0, 300050.0], [89.0, 460835.17391304346], [88.0, 429176.4210526315], [95.0, 337388.5], [94.0, 300113.0], [93.0, 300017.0], [92.0, 300017.0], [99.0, 300027.0], [98.0, 300027.0], [97.0, 300044.0], [96.0, 300039.0], [100.0, 277385.2971014492], [1.0, 521632.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[80.11666666666669, 369710.6933333335]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18.783333333333335, "minX": 1.73454408E12, "maxY": 1798.85, "series": [{"data": [[1.7345442E12, 18.783333333333335], [1.7345445E12, 169.05], [1.7345448E12, 209.93333333333334], [1.73454462E12, 206.61666666666667], [1.73454492E12, 119.33333333333333], [1.73454522E12, 60.78333333333333], [1.73454552E12, 43.11666666666667], [1.73454438E12, 678.6], [1.73454468E12, 395.2], [1.73454498E12, 170.66666666666666], [1.73454528E12, 29.85], [1.7345451E12, 117.38333333333334], [1.7345454E12, 33.166666666666664], [1.73454408E12, 1798.85], [1.73454486E12, 187.83333333333334], [1.73454516E12, 42.083333333333336], [1.73454546E12, 23.216666666666665], [1.73454426E12, 300.53333333333336], [1.73454456E12, 165.73333333333332], [1.73454534E12, 36.483333333333334], [1.73454432E12, 244.18333333333334], [1.73454414E12, 56.35], [1.73454444E12, 172.36666666666667], [1.73454474E12, 244.35], [1.73454504E12, 123.93333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7345442E12, 23.65], [1.7345445E12, 212.81666666666666], [1.7345448E12, 283.73333333333335], [1.73454462E12, 260.15], [1.73454492E12, 189.16666666666666], [1.73454522E12, 212.81666666666666], [1.73454552E12, 307.45], [1.73454438E12, 851.4], [1.73454468E12, 709.5333333333333], [1.73454498E12, 331.0], [1.73454528E12, 212.85], [1.7345451E12, 283.73333333333335], [1.7345454E12, 236.4], [1.73454408E12, 307.51666666666665], [1.73454486E12, 236.5], [1.73454516E12, 189.2], [1.73454546E12, 165.51666666666668], [1.73454426E12, 378.3666666666667], [1.73454456E12, 189.16666666666666], [1.73454534E12, 260.0833333333333], [1.73454432E12, 307.4166666666667], [1.73454414E12, 70.95], [1.73454444E12, 236.46666666666667], [1.73454474E12, 307.45], [1.73454504E12, 331.06666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73454552E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 284.0, "minX": 1.73454408E12, "maxY": 519083.3, "series": [{"data": [[1.73454486E12, 567.1], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 477.3333333333333], [1.7345448E12, 839.7272727272726], [1.73454462E12, 430.7272727272727], [1.73454492E12, 456.5], [1.73454522E12, 513.0], [1.73454426E12, 503.125], [1.73454456E12, 524.4444444444445], [1.73454438E12, 1241.5277777777778], [1.73454468E12, 1058.7368421052631], [1.73454498E12, 473.87499999999994], [1.73454432E12, 659.4615384615383], [1.7345451E12, 619.6], [1.73454414E12, 906.0], [1.73454444E12, 447.55555555555554], [1.73454474E12, 584.0769230769231], [1.73454504E12, 605.2], [1.73454408E12, 8927.938053097345]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.7345442E12, 120452.0], [1.7345445E12, 386703.6666666667], [1.7345448E12, 478464.8333333333], [1.73454462E12, 448673.09090909094], [1.73454492E12, 410278.12499999994], [1.73454522E12, 515355.0], [1.73454552E12, 498088.69230769237], [1.73454438E12, 300221.0], [1.73454468E12, 335390.6000000001], [1.73454498E12, 408937.14285714284], [1.73454528E12, 468272.1111111112], [1.7345451E12, 423293.25], [1.7345454E12, 519083.3], [1.73454408E12, 10939.923076923076], [1.73454486E12, 422871.3], [1.73454516E12, 491087.875], [1.73454546E12, 499412.14285714284], [1.73454426E12, 170190.68750000003], [1.73454456E12, 432254.87500000006], [1.73454534E12, 438886.00000000006], [1.73454432E12, 224572.6153846154], [1.73454414E12, 47612.333333333336], [1.73454444E12, 348029.3], [1.73454474E12, 431347.46153846156], [1.73454504E12, 443273.2857142858]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73454552E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73454408E12, "maxY": 519083.3, "series": [{"data": [[1.73454486E12, 0.0], [1.73454516E12, 0.0], [1.7345442E12, 0.0], [1.7345445E12, 0.0], [1.7345448E12, 0.0], [1.73454462E12, 0.0], [1.73454492E12, 0.0], [1.73454522E12, 0.0], [1.73454426E12, 0.0], [1.73454456E12, 0.0], [1.73454438E12, 0.0], [1.73454468E12, 0.0], [1.73454498E12, 0.0], [1.73454432E12, 0.0], [1.7345451E12, 0.0], [1.73454414E12, 0.0], [1.73454444E12, 0.0], [1.73454474E12, 0.0], [1.73454504E12, 0.0], [1.73454408E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.7345442E12, 120451.0], [1.7345445E12, 386703.55555555556], [1.7345448E12, 478464.6666666666], [1.73454462E12, 448673.09090909094], [1.73454492E12, 410278.0], [1.73454522E12, 515354.8888888889], [1.73454552E12, 498088.61538461543], [1.73454438E12, 300220.91666666674], [1.73454468E12, 335390.33333333326], [1.73454498E12, 408936.99999999994], [1.73454528E12, 468271.8888888889], [1.7345451E12, 423293.1666666666], [1.7345454E12, 519083.3], [1.73454408E12, 10939.923076923076], [1.73454486E12, 422871.20000000007], [1.73454516E12, 491087.625], [1.73454546E12, 499412.0], [1.73454426E12, 170190.5625], [1.73454456E12, 432254.87500000006], [1.73454534E12, 438885.90909090906], [1.73454432E12, 224572.3846153846], [1.73454414E12, 47612.333333333336], [1.73454444E12, 348029.2], [1.73454474E12, 431347.30769230775], [1.73454504E12, 443273.14285714284]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73454552E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73454408E12, "maxY": 6103.1, "series": [{"data": [[1.73454486E12, 0.0], [1.73454516E12, 0.0], [1.7345442E12, 0.0], [1.7345445E12, 0.0], [1.7345448E12, 0.0], [1.73454462E12, 0.0], [1.73454492E12, 0.0], [1.73454522E12, 0.0], [1.73454426E12, 0.0], [1.73454456E12, 0.0], [1.73454438E12, 0.0], [1.73454468E12, 0.0], [1.73454498E12, 0.0], [1.73454432E12, 0.0], [1.7345451E12, 0.0], [1.73454414E12, 0.0], [1.73454444E12, 0.0], [1.73454474E12, 0.0], [1.73454504E12, 0.0], [1.73454408E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.7345442E12, 5962.0], [1.7345445E12, 4730.777777777777], [1.7345448E12, 523.8333333333334], [1.73454462E12, 1686.0], [1.73454492E12, 9.875], [1.73454522E12, 16.77777777777778], [1.73454552E12, 11.384615384615385], [1.73454438E12, 4097.749999999999], [1.73454468E12, 408.83333333333337], [1.73454498E12, 13.285714285714288], [1.73454528E12, 10.444444444444443], [1.7345451E12, 14.75], [1.7345454E12, 14.2], [1.73454408E12, 5222.076923076924], [1.73454486E12, 10.9], [1.73454516E12, 36.75], [1.73454546E12, 13.857142857142856], [1.73454426E12, 5508.25], [1.73454456E12, 4574.625], [1.73454534E12, 13.727272727272727], [1.73454432E12, 5705.461538461539], [1.73454414E12, 5414.666666666667], [1.73454444E12, 6103.1], [1.73454474E12, 475.3846153846153], [1.73454504E12, 49.14285714285714]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73454552E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 158.0, "minX": 1.73454408E12, "maxY": 20925.0, "series": [{"data": [[1.73454486E12, 1140.0], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 803.0], [1.7345448E12, 1652.0], [1.73454462E12, 775.0], [1.73454492E12, 859.0], [1.73454522E12, 584.0], [1.73454426E12, 1003.0], [1.73454456E12, 986.0], [1.73454438E12, 2687.0], [1.73454468E12, 2227.0], [1.73454498E12, 620.0], [1.73454432E12, 1895.0], [1.7345451E12, 906.0], [1.73454414E12, 1065.0], [1.73454444E12, 907.0], [1.73454474E12, 1063.0], [1.73454504E12, 1356.0], [1.73454408E12, 20925.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73454486E12, 1122.7], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 803.0], [1.7345448E12, 1550.2000000000003], [1.73454462E12, 738.0000000000001], [1.73454492E12, 859.0], [1.73454522E12, 584.0], [1.73454426E12, 957.5], [1.73454456E12, 986.0], [1.73454438E12, 2201.6], [1.73454468E12, 2166.0], [1.73454498E12, 620.0], [1.73454432E12, 1568.9999999999998], [1.7345451E12, 906.0], [1.73454414E12, 1065.0], [1.73454444E12, 907.0], [1.73454474E12, 1054.6], [1.73454504E12, 1356.0], [1.73454408E12, 15964.200000000013]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73454486E12, 1140.0], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 803.0], [1.7345448E12, 1652.0], [1.73454462E12, 775.0], [1.73454492E12, 859.0], [1.73454522E12, 584.0], [1.73454426E12, 1003.0], [1.73454456E12, 986.0], [1.73454438E12, 2687.0], [1.73454468E12, 2227.0], [1.73454498E12, 620.0], [1.73454432E12, 1895.0], [1.7345451E12, 906.0], [1.73454414E12, 1065.0], [1.73454444E12, 907.0], [1.73454474E12, 1063.0], [1.73454504E12, 1356.0], [1.73454408E12, 20654.94]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73454486E12, 1140.0], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 803.0], [1.7345448E12, 1652.0], [1.73454462E12, 775.0], [1.73454492E12, 859.0], [1.73454522E12, 584.0], [1.73454426E12, 1003.0], [1.73454456E12, 986.0], [1.73454438E12, 2305.3499999999995], [1.73454468E12, 2227.0], [1.73454498E12, 620.0], [1.73454432E12, 1895.0], [1.7345451E12, 906.0], [1.73454414E12, 1065.0], [1.73454444E12, 907.0], [1.73454474E12, 1063.0], [1.73454504E12, 1356.0], [1.73454408E12, 17421.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73454486E12, 249.0], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 237.0], [1.7345448E12, 409.0], [1.73454462E12, 163.0], [1.73454492E12, 294.0], [1.73454522E12, 442.0], [1.73454426E12, 201.0], [1.73454456E12, 217.0], [1.73454438E12, 279.0], [1.73454468E12, 182.0], [1.73454498E12, 223.0], [1.73454432E12, 179.0], [1.7345451E12, 429.0], [1.73454414E12, 592.0], [1.73454444E12, 158.0], [1.73454474E12, 279.0], [1.73454504E12, 260.0], [1.73454408E12, 900.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73454486E12, 454.0], [1.73454516E12, 514.0], [1.7345442E12, 284.0], [1.7345445E12, 490.0], [1.7345448E12, 683.0], [1.73454462E12, 410.0], [1.73454492E12, 405.0], [1.73454522E12, 513.0], [1.73454426E12, 487.0], [1.73454456E12, 429.0], [1.73454438E12, 1140.0], [1.73454468E12, 1021.0], [1.73454498E12, 526.0], [1.73454432E12, 495.0], [1.7345451E12, 521.0], [1.73454414E12, 1061.0], [1.73454444E12, 404.0], [1.73454474E12, 527.0], [1.73454504E12, 516.0], [1.73454408E12, 9438.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73454522E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 448.0, "minX": 1.0, "maxY": 488547.5, "series": [{"data": [[4.0, 2920.0], [8.0, 4585.5], [2.0, 448.0], [1.0, 574.0], [17.0, 646.0], [5.0, 4611.0], [10.0, 647.0], [11.0, 8346.0], [3.0, 6627.0], [6.0, 12157.0], [7.0, 2503.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 397935.0], [2.0, 368777.0], [17.0, 306489.5], [5.0, 300023.0], [10.0, 300048.0], [11.0, 10865.0], [3.0, 379694.0], [6.0, 488547.5], [7.0, 300025.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 488547.5, "series": [{"data": [[4.0, 0.0], [8.0, 0.0], [2.0, 0.0], [1.0, 0.0], [17.0, 0.0], [5.0, 0.0], [10.0, 0.0], [11.0, 0.0], [3.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 397935.0], [2.0, 368777.0], [17.0, 306489.5], [5.0, 300023.0], [10.0, 300048.0], [11.0, 10865.0], [3.0, 379694.0], [6.0, 488547.5], [7.0, 300025.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.73454408E12, "maxY": 3.7666666666666666, "series": [{"data": [[1.73454486E12, 0.3333333333333333], [1.73454516E12, 0.03333333333333333], [1.7345442E12, 0.03333333333333333], [1.7345445E12, 0.3], [1.7345448E12, 0.36666666666666664], [1.73454462E12, 0.36666666666666664], [1.73454492E12, 0.2], [1.73454522E12, 0.06666666666666667], [1.73454426E12, 0.5333333333333333], [1.73454456E12, 0.2833333333333333], [1.73454438E12, 1.2], [1.73454468E12, 0.6333333333333333], [1.73454498E12, 0.26666666666666666], [1.73454432E12, 0.43333333333333335], [1.7345451E12, 0.16666666666666666], [1.73454414E12, 0.1], [1.73454444E12, 0.31666666666666665], [1.73454474E12, 0.43333333333333335], [1.73454504E12, 0.16666666666666666], [1.73454408E12, 3.7666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73454522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.73454408E12, "maxY": 1.8833333333333333, "series": [{"data": [[1.73454486E12, 0.16666666666666666], [1.73454516E12, 0.016666666666666666], [1.7345442E12, 0.016666666666666666], [1.7345445E12, 0.15], [1.7345448E12, 0.18333333333333332], [1.73454462E12, 0.18333333333333332], [1.73454492E12, 0.1], [1.73454522E12, 0.03333333333333333], [1.73454426E12, 0.26666666666666666], [1.73454456E12, 0.15], [1.73454438E12, 0.6], [1.73454468E12, 0.31666666666666665], [1.73454498E12, 0.13333333333333333], [1.73454432E12, 0.21666666666666667], [1.7345451E12, 0.08333333333333333], [1.73454414E12, 0.05], [1.73454444E12, 0.15], [1.73454474E12, 0.21666666666666667], [1.73454504E12, 0.08333333333333333], [1.73454408E12, 1.8833333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7345442E12, 0.016666666666666666], [1.7345445E12, 0.15], [1.7345448E12, 0.2], [1.73454462E12, 0.18333333333333332], [1.73454492E12, 0.13333333333333333], [1.73454522E12, 0.15], [1.73454552E12, 0.21666666666666667], [1.73454438E12, 0.13333333333333333], [1.73454468E12, 0.13333333333333333], [1.73454498E12, 0.13333333333333333], [1.73454528E12, 0.15], [1.7345451E12, 0.15], [1.7345454E12, 0.16666666666666666], [1.73454408E12, 0.21666666666666667], [1.73454486E12, 0.16666666666666666], [1.73454516E12, 0.11666666666666667], [1.73454546E12, 0.11666666666666667], [1.73454426E12, 0.26666666666666666], [1.73454456E12, 0.13333333333333333], [1.73454534E12, 0.18333333333333332], [1.73454432E12, 0.21666666666666667], [1.73454414E12, 0.05], [1.73454444E12, 0.16666666666666666], [1.73454474E12, 0.18333333333333332], [1.73454504E12, 0.2]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.73454438E12, 0.4666666666666667], [1.73454516E12, 0.016666666666666666], [1.73454468E12, 0.36666666666666664], [1.73454498E12, 0.1], [1.7345451E12, 0.05], [1.73454474E12, 0.03333333333333333], [1.73454504E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73454552E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.73454408E12, "maxY": 1.8833333333333333, "series": [{"data": [[1.73454486E12, 0.16666666666666666], [1.73454516E12, 0.016666666666666666], [1.7345442E12, 0.016666666666666666], [1.7345445E12, 0.15], [1.7345448E12, 0.18333333333333332], [1.73454462E12, 0.18333333333333332], [1.73454492E12, 0.1], [1.73454522E12, 0.03333333333333333], [1.73454426E12, 0.26666666666666666], [1.73454456E12, 0.15], [1.73454438E12, 0.6], [1.73454468E12, 0.31666666666666665], [1.73454498E12, 0.13333333333333333], [1.73454432E12, 0.21666666666666667], [1.7345451E12, 0.08333333333333333], [1.73454414E12, 0.05], [1.73454444E12, 0.15], [1.73454474E12, 0.21666666666666667], [1.73454504E12, 0.08333333333333333], [1.73454408E12, 1.8833333333333333]], "isOverall": false, "label": "OS Process Sampler-success", "isController": false}, {"data": [[1.7345442E12, 0.016666666666666666], [1.7345445E12, 0.15], [1.7345448E12, 0.2], [1.73454462E12, 0.18333333333333332], [1.73454492E12, 0.13333333333333333], [1.73454522E12, 0.15], [1.73454552E12, 0.21666666666666667], [1.73454438E12, 0.6], [1.73454468E12, 0.5], [1.73454498E12, 0.23333333333333334], [1.73454528E12, 0.15], [1.7345451E12, 0.2], [1.7345454E12, 0.16666666666666666], [1.73454408E12, 0.21666666666666667], [1.73454486E12, 0.16666666666666666], [1.73454516E12, 0.13333333333333333], [1.73454546E12, 0.11666666666666667], [1.73454426E12, 0.26666666666666666], [1.73454456E12, 0.13333333333333333], [1.73454534E12, 0.18333333333333332], [1.73454432E12, 0.21666666666666667], [1.73454414E12, 0.05], [1.73454444E12, 0.16666666666666666], [1.73454474E12, 0.21666666666666667], [1.73454504E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73454552E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.73454408E12, "maxY": 1.8833333333333333, "series": [{"data": [[1.73454486E12, 0.16666666666666666], [1.73454516E12, 0.016666666666666666], [1.7345442E12, 0.016666666666666666], [1.7345445E12, 0.15], [1.7345448E12, 0.18333333333333332], [1.73454462E12, 0.18333333333333332], [1.73454492E12, 0.1], [1.73454522E12, 0.03333333333333333], [1.73454426E12, 0.26666666666666666], [1.73454456E12, 0.15], [1.73454438E12, 0.6], [1.73454468E12, 0.31666666666666665], [1.73454498E12, 0.13333333333333333], [1.73454432E12, 0.21666666666666667], [1.7345451E12, 0.08333333333333333], [1.73454414E12, 0.05], [1.73454444E12, 0.15], [1.73454474E12, 0.21666666666666667], [1.73454504E12, 0.08333333333333333], [1.73454408E12, 1.8833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7345442E12, 0.016666666666666666], [1.7345445E12, 0.15], [1.7345448E12, 0.2], [1.73454462E12, 0.18333333333333332], [1.73454492E12, 0.13333333333333333], [1.73454522E12, 0.15], [1.73454552E12, 0.21666666666666667], [1.73454438E12, 0.6], [1.73454468E12, 0.5], [1.73454498E12, 0.23333333333333334], [1.73454528E12, 0.15], [1.7345451E12, 0.2], [1.7345454E12, 0.16666666666666666], [1.73454408E12, 0.21666666666666667], [1.73454486E12, 0.16666666666666666], [1.73454516E12, 0.13333333333333333], [1.73454546E12, 0.11666666666666667], [1.73454426E12, 0.26666666666666666], [1.73454456E12, 0.13333333333333333], [1.73454534E12, 0.18333333333333332], [1.73454432E12, 0.21666666666666667], [1.73454414E12, 0.05], [1.73454444E12, 0.16666666666666666], [1.73454474E12, 0.21666666666666667], [1.73454504E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73454552E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

